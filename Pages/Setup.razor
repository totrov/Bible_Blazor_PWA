@page "/setup"
@using System.IO
@using Bible_Blazer_PWA.Config
@using Bible_Blazer_PWA.Services.MudBlazorHelpers
@using Bible_Blazer_PWA.Services.Parse
@using Bible_Blazer_PWA.Services.Readers
@using b2xtranslator.StructuredStorage.Reader
@using System.Net.Http
@using Bible_Blazer_PWA.Parameters
@using Bible_Blazer_PWA.DomainObjects
@inject HttpClient Http
@inject DbParametersFacade dbParams
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<MudExpansionPanels>
    <MudExpansionPanel>
        <TitleContent>
            <MudText Typo="Typo.h5">Загрузка планов уроков</MudText>
        </TitleContent>
        <ChildContent>
            <h5 class="card-title">Загрузить из word файлов (можно выбрать несколько сразу)</h5>
            <InputFile OnChange="@LoadFiles" disabled="@IsDisabled" multiple />
            <MudDivider DividerType="DividerType.Middle" Class="my-6" />

            <h5 class="card-title">Загрузить из облака (требуется интернет)</h5>
            <MudGrid>
                <MudItem xs="8">
                    <MudSelect T="string" Label="Какие уроки загрузить:" MultiSelection="true" @bind-Value="selectedLessonsValue" @bind-SelectedValues="options">
                        @foreach (var lessonName in lessonNames)
                        {
                            <MudSelectItem T="string" Value="@lessonName">@lessonName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="4">
                    <MudFab Color="Color.Success" StartIcon="@Icons.Filled.CloudDownload" @onclick="LoadFromAzure" />
                </MudItem>
            </MudGrid>
            @if (LoadingItems.Any())
            {
                <MudGrid>
                    <MudItem xs="8">
                        <MudList Clickable="false">
                            @foreach (var item in LoadingItems)
                            {
                                <Bible_Blazer_PWA.Components.LoadingItem Name="@item.Name" Status="@item.Status"></Bible_Blazer_PWA.Components.LoadingItem>
                            }
                        </MudList>

                    </MudItem>
                </MudGrid>
            }
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <MudText Typo="Typo.h5">Визуальные</MudText>
        </TitleContent>
        <ChildContent>
            <EditForm Model=@ParametersFormData>
                <div class="card card-body col-lg-6 col-md-7 col-sm">
                    <table>
                        <tr>
                            <td>Скрывать инструменты</td>
                            <td>
                                <InputCheckbox @bind-Value="@HideTools"></InputCheckbox>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет Фона (изменится после перехода на другую страницу)"
                                                @bind-Text="@ParametersFormData.MainBackground"
                                                Style="@($"background-color: {ParametersFormData.MainBackground};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет фона панели инструментов"
                                                @bind-Text="@ParametersFormData.ToolsBg"
                                                Style="@($"background-color: {ParametersFormData.ToolsBg};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudSlider @bind-Value="BlocksPadding" Min="0" Max="2" Step="0.05" Color="Color.Info">Внутренний отступ блоков: @ParametersFormData.BlocksPadding.ToString()</MudSlider>
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudSlider @bind-Value="BlocksPaddingLeft" Min="0" Max="2" Step="0.05" Color="Color.Info">Внутренний отступ блоков слева: @ParametersFormData.BlocksPaddingLeft.ToString()</MudSlider>
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudSwitch @bind-Checked="@ParametersFormData.HideBlocksBorders" Color="Color.Primary" Converter="@(new RegularStringToBoolConverter())">Скрывать границы блоков</MudSwitch>
                            </td>
                            <td>
                            </td>
                        </tr>
                    </table>
                </div>
                <div class="card card-body col-lg-6 col-md-7 col-sm">
                    <table>
                        <tr style="border-bottom:1px black solid;"><td colspan="2">Уровень 1</td></tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет фона в заголовке"
                                                @bind-Text="@ParametersFormData.FirstLevelBg"
                                                Style="@($"background-color: {ParametersFormData.FirstLevelBg};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет фона в теле"
                                                @bind-Text="@ParametersFormData.FirstLevelBodyBg"
                                                Style="@($"background-color: {ParametersFormData.FirstLevelBodyBg};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td><MudSwitch @bind-Checked="@ParametersFormData.FirstLevelFontWeight" Color="Color.Error" Converter="@(new BoldFontStringToBoolConverter())">Жирный шрифт</MudSwitch></td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudSlider @bind-Value="FirstLevelMarginTop" Min="0" Max="100" Step="5" Color="Color.Info">Отступ сверху: @ParametersFormData.FirstLevelMarginTop.ToString()</MudSlider>
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr style="border-bottom:1px black solid;"><td colspan="2">Уровень 2</td></tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет фона в заголовке"
                                                @bind-Text="@ParametersFormData.SecondLevelBg"
                                                Style="@($"background-color: {ParametersFormData.SecondLevelBg};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет фона в теле"
                                                @bind-Text="@ParametersFormData.SecondLevelBodyBg"
                                                Style="@($"background-color: {ParametersFormData.SecondLevelBodyBg};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td><MudSwitch @bind-Checked="@ParametersFormData.SecondLevelFontWeight" Color="Color.Error" Converter="@(new BoldFontStringToBoolConverter())">Жирный шрифт</MudSwitch></td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudSlider @bind-Value="SecondLevelMarginTop" Min="0" Max="100" Step="5" Color="Color.Info">Отступ сверху: @ParametersFormData.SecondLevelMarginTop.ToString()</MudSlider>
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr style="border-bottom:1px black solid;"><td colspan="2">Уровень 3</td></tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет фона в заголовке"
                                                @bind-Text="@ParametersFormData.ThirdLevelBg"
                                                Style="@($"background-color: {ParametersFormData.ThirdLevelBg};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudColorPicker Label="Цвет фона в теле"
                                                @bind-Text="@ParametersFormData.ThirdLevelBodyBg"
                                                Style="@($"background-color: {ParametersFormData.ThirdLevelBodyBg};")" Placeholder="Выберите цвет" />
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudSwitch @bind-Checked="@ParametersFormData.ThirdLevelFontWeight"
                                           Color="Color.Error" Converter="@(new BoldFontStringToBoolConverter())">Жирный шрифт</MudSwitch>
                            </td>
                            <td>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <MudSlider @bind-Value="ThirdLevelMarginTop" Min="0" Max="100" Step="5" Color="Color.Info">Отступ сверху: @ParametersFormData.ThirdLevelMarginTop.ToString()</MudSlider>
                            </td>
                            <td>
                            </td>
                        </tr>
                    </table>
                </div>
            </EditForm>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <MudText Typo="Typo.h5">Импорт/Экспорт параметров</MudText>
        </TitleContent>
        <ChildContent>
            <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.ArrowDownward" @onclick="ExportParamsToFile" Color="Color.Primary">Скачать текущие параметры</MudButton>
            <MudDivider DividerType="DividerType.Middle" Class="my-6" />
            <InputFile id="parametersFileInput" OnChange="LoadParameters" hidden />
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Filled.CloudUpload"
                       for="parametersFileInput">
                Загрузить параметры из файла
            </MudButton>
        </ChildContent>
    </MudExpansionPanel>
    <MudExpansionPanel>
        <TitleContent>
            <MudText Typo="Typo.h5">Системное</MudText>
        </TitleContent>
        <ChildContent>
            <div class="card card-body col-lg-6 col-md-7 col-sm">
                <h5 class="card-title">Удалить Базу данных</h5>
                <button type="button" class="btn btn-danger" @onclick="DeleteDb">Удалить</button>
            </div>
        </ChildContent>
    </MudExpansionPanel>
</MudExpansionPanels>

@code
{
    ParametersModel ParametersFormData;
    private bool HideTools
    {
        get { return bool.Parse(ParametersFormData.HideTools); }
        set { ParametersFormData.HideTools = value.ToString(); }
    }

    private double BlocksPadding
    {
        get { return double.Parse(ParametersFormData.BlocksPadding.Replace('.', ',')); }
        set { ParametersFormData.BlocksPadding = value.ToString().Replace(',', '.'); ParametersFormData.BlocksPaddingLeft = value.ToString().Replace(',', '.'); }
    }

    private double BlocksPaddingLeft
    {
        get { return double.Parse(ParametersFormData.BlocksPaddingLeft.Replace('.', ',')); }
        set { ParametersFormData.BlocksPaddingLeft = value.ToString().Replace(',', '.'); }
    }

    private int FirstLevelMarginTop
    {
        get { return int.Parse(ParametersFormData.FirstLevelMarginTop); }
        set { ParametersFormData.FirstLevelMarginTop = value.ToString(); }
    }

    private int SecondLevelMarginTop
    {
        get { return int.Parse(ParametersFormData.SecondLevelMarginTop); }
        set { ParametersFormData.SecondLevelMarginTop = value.ToString(); }
    }

    private int ThirdLevelMarginTop
    {
        get { return int.Parse(ParametersFormData.ThirdLevelMarginTop); }
        set { ParametersFormData.ThirdLevelMarginTop = value.ToString(); }
    }

    IBrowserFile parametrsFile = null;


    private string selectedLessonsValue { get; set; } = "Ничего не выбрано";
    private IEnumerable<string> lessonNames = LessonLoadConfig.GetLessonNames();
    private IEnumerable<string> options { get; set; } = new HashSet<string>();// { "Бытие", "Исход - Соломон", "Пророки", "Евангелия", "Деяния - Откровение", "Основы веры" };

    protected override void OnInitialized()
    {
        base.OnInitialized();
        lessonNames.ToList().ForEach(l => ((HashSet<string>)options).Add(l));
        ParametersFormData = dbParams.ParametersModel;
    }

    class LoadingItem
    {
        public string Name { get; set; }
        public string Status { get; set; }
    }
    private bool IsDisabled { get; set; } = false;
    private List<LoadingItem> LoadingItems { get; set; } = new List<LoadingItem>();
    public async Task DeleteDb()
    {
        await db.CallVoidDbAsync(null, "delete");
    }
    public async Task LoadFromAzure()
    {
        Stream stream = await Http.GetStreamAsync("https://bibleblazorpwastorage.blob.core.windows.net/lesson-units/Бытие.doc");

        b2xtranslator.StructuredStorage.Reader.StructuredStorageReader reader = null;
        try
        {
            reader = new StructuredStorageReader(stream);
            b2xtranslator.DocFileFormat.WordDocument doc = new(reader);
            string stringContent = new String(doc.Text.ToArray());
            string json = await LessonParser.ParseLessons(stringContent);
            var resultHandler = await db.ImportLessonsJson(json);
            //resultHandler.OnDbResultOK += () => { UpdateItemStatus(item, "Успешно загружено"); };
        }
        catch (b2xtranslator.DocFileFormat.ByteParseException)
        {
            //UpdateItemStatus(item, "Ошибка чтения документа. Поддерживается только *.doc.");
            //status = "Unable_to_read_DOC_Document";
        }
        catch (b2xtranslator.StructuredStorage.Common.InvalidValueInHeaderException)
        {
            //UpdateItemStatus(item, "Ошибка при попытке открыть файл.");
            //status = "Unable_to_open_DOC_Document";
        }
        catch (Exception ex)
        {
            //UpdateItemStatus(item, $"Ошибка: {ex.Message}");
            //status = $"Unknown error: {ex.Message}";
        }
        finally
        {
            if (reader != null) reader.Dispose();
        }

        //System.IO.File.Delete(fileName);
    }

    public async Task ExportParamsToFile()
    {
        using var stream = await dbParams.ExportToJson();
        using var streamRef = new DotNetStreamReference(stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", "Parameters.json", streamRef);
    }

    private void UpdateItemStatus(LoadingItem item, string newStatus)
    {
        item.Status = newStatus;
        StateHasChanged();
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        LoadingItems.Clear();
        IsDisabled = true;
        foreach (var file in e.GetMultipleFiles(10))
        {
            var item = new LoadingItem { Name = file.Name, Status = "Копирование..." };
            LoadingItems.Add(item);
            await using FileStream fs = new(file.Name, FileMode.Create);
            await file.OpenReadStream(2000000).CopyToAsync(fs);
            UpdateItemStatus(item, "Чтение...");

            string stringContent = "";
            bool readSucceeded = false;
            var builder = new ReaderBuilder(file.Name);
            try
            {
                using (var reader = builder.GetReader())
                {
                    stringContent = reader.ReadDocumentToString(out readSucceeded);
                }
            }
            catch (ReaderException ex)
            {
                UpdateItemStatus(item, ex.Message);
            }
            finally
            {
                System.IO.File.Delete(file.Name);
            }
            if (readSucceeded)
            {
                string json = await LessonParser.ParseLessons(stringContent);
                var resultHandler = await db.ImportLessonsJson(json);
                resultHandler.OnDbResultOK += () => { UpdateItemStatus(item, "Успешно загружено"); };
            }
        }
        IsDisabled = false;

        //string connectionString = "DefaultEndpointsProtocol=https;AccountName=bibleblazorpwastorage;AccountKey=IZer1LD5t3UXlmSRdISWmJ6lXQX3Gzp/H0e+0xh1jdMNGBLiD1PbSqnlLAMTR3q9SLqqQkMEN8L2LfOONOr94A==;EndpointSuffix=core.windows.net";
        //string containerName = "lesson-units";
        //string blobName = file.Name;
        //string filePath = file.Name;

        //var content = new StreamContent(fs);
        //content.Headers.TryAddWithoutValidation("Authorization", "SharedKey bibleblazorpwastorage:IZer1LD5t3UXlmSRdISWmJ6lXQX3Gzp/H0e+0xh1jdMNGBLiD1PbSqnlLAMTR3q9SLqqQkMEN8L2LfOONOr94A==");
        //content.Headers.TryAddWithoutValidation("x-ms-lease-id", "c016d911-0d71-438b-af87-8c7c232ac612");
        //content.Headers.TryAddWithoutValidation("x-ms-version", "2015-12-11");
        //content.Headers.TryAddWithoutValidation("x-ms-date", DateTime.UtcNow.ToString("R"));
        //content.Headers.TryAddWithoutValidation("x-ms-blob-type", "BlockBlob");
        //content.Headers.ContentLength = fs.Length;
        //await Http.PutAsync("https://bibleblazorpwastorage.blob.core.windows.net/lesson-units/Бытие.doc", content);
    }

    private async Task LoadParameters(InputFileChangeEventArgs e)
    {
        parametrsFile = e.File;
        await dbParams.ImportFromStream(parametrsFile.OpenReadStream());
        await ParametersFormData.InitFromDb();
        Snackbar.Add("Параметры загружены");
    }
}