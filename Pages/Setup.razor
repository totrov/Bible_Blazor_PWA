@page "/setup"
@inherits ComponentWithDbInteractionBase
@using System.IO
@using Bible_Blazer_PWA.Services.Parse
@using b2xtranslator.StructuredStorage.Reader;
@using b2xtranslator.OpenXmlLib.WordprocessingML;
@using b2xtranslator.WordprocessingMLMapping; 
@using b2xtranslator.OpenXmlLib; 
<div class="card card-body" style="margin-bottom:10px;">
    <h2 class="card-title">Планы уроков</h2>
    <div class="card card-body">
        <h5 class="card-title">Загрузить из word файлов (можно выбрать несколько сразу)</h5>
        <InputFile OnChange="@LoadFiles" multiple />
        <ul>
            @foreach (var item in LoadingItems)
            {
                <Bible_Blazer_PWA.Components.LoadingItem Name="@item.Name" Status="@item.Status"></Bible_Blazer_PWA.Components.LoadingItem>
            }
        </ul>
    </div>
</div>

<div class="card card-body" style="margin-bottom:10px;">
    <h2 class="card-title">Системное</h2>
    <div class="card card-body col-lg-6 col-md-7 col-sm">
        <h5 class="card-title">Удалить Базу данных</h5>
        <button type="button" class="btn btn-danger" @onclick="DeleteDb">Удалить</button>
    </div>
</div>

@code
{
    class LoadingItem
    {
        public string Name { get; set; }
        public string Status { get; set; }
    }

    private List<LoadingItem> LoadingItems { get; set; } = new List<LoadingItem>();

    public async Task DeleteDb()
    {
        await DatabaseFacade.CallVoidDbAsync(null, "delete");
    }

    private void UpdateItemStatus(LoadingItem item, string newStatus)
    {
        item.Status = newStatus;
        StateHasChanged();
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        LoadingItems.Clear();
        foreach (var file in e.GetMultipleFiles(10))
        {
            var item = new LoadingItem { Name = file.Name, Status = "Копирование..." };
            LoadingItems.Add(item);
            await using FileStream fs = new(file.Name, FileMode.Create);
            await file.OpenReadStream(2000000).CopyToAsync(fs);
            UpdateItemStatus(item, "Чтение...");
            string status = "done";
            b2xtranslator.StructuredStorage.Reader.StructuredStorageReader reader = null;
            try
            {
                reader = new StructuredStorageReader(file.Name);
                b2xtranslator.DocFileFormat.WordDocument doc = new(reader);
                var listOfChars = doc.Text;
                var listOfCharsToArray = listOfChars.ToArray();
                string stringContent = string.Join("",listOfChars);
                string stringContent2 = string.Concat(listOfChars);
                string s0 = new String(listOfCharsToArray);
                string s1 = stringContent += "9999999999999999999999";
                int s1l = s1.Length;
                int s0l = s0.Length;
                int stringContentl = stringContent.Length;
                int stringContent2l = stringContent2.Length;
                //var wpd = b2xtranslator.OpenXmlLib.WordprocessingML.WordprocessingDocument.Create(file.Name+"x", OpenXmlPackage.DocumentType.Document);
                //WordprocessingDocument docx = WordprocessingDocument.Create(file.Name + "x", OpenXmlPackage.DocumentType.Document);
                //Converter.Convert(doc, docx);

                //using (DocumentFormat.OpenXml.Packaging.WordprocessingDocument wordDoc = DocumentFormat.OpenXml.Packaging.WordprocessingDocument.Open(file.Name + "x", true))
                //{
                //    stringContent = wordDoc.MainDocumentPart.Document.InnerText;
                //}
                //UpdateItemStatus(item, "Разбор...");
                string json = await LessonParser.ParseLessons(stringContent);
                //UpdateItemStatus(item, "Обновление базы...");
                var resultHandler = await DatabaseFacade.ImportLessonsJson(json);
                resultHandler.OnDbResultOK += () => { UpdateItemStatus(item, "Успешно загружено"); };
            }
            catch (b2xtranslator.DocFileFormat.ByteParseException)
            {
                UpdateItemStatus(item, "Ошибка чтения документа. Поддерживается только *.doc.");
                status = "Unable_to_read_DOC_Document";
            }
            catch (b2xtranslator.StructuredStorage.Common.InvalidValueInHeaderException)
            {
                UpdateItemStatus(item, "Ошибка при попытке открыть файл.");
                status = "Unable_to_open_DOC_Document";
            }
            catch (Exception ex)
            {
                UpdateItemStatus(item, $"Ошибка: {ex.Message}");
                status = $"Unknown error: {ex.Message}";
            }
            finally
            {
                if (reader != null) reader.Dispose();
            }

            System.IO.File.Delete(file.Name);
        }
    }
}