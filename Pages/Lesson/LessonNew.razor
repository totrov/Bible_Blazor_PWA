@page "/lessonNew/{Id:int}/{UnitNumber:int}"
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@namespace BibleComponents
@inject HttpClient Http
@inject DbParametersFacade DbParameters;
@using Bible_Blazer_PWA.Services.Menu
@inject MenuService menu
@using Bible_Blazer_PWA.DomainObjects;
@using Bible_Blazer_PWA.Parameters;
@using Param = Microsoft.AspNetCore.Components.ParameterAttribute
@using Bible_Blazer_PWA.Pages.Lesson
@using Bible_Blazer_PWA.Services.Menu;

@if (lesson != null)
{
    <Bible_Blazer_PWA.Components.FloatingComponent>
        <button type="button" class="btn btn-outline-primary" style="display: inline;" @onclick="ToggleCollapse"><span class="oi @getGlobalToggleCollapseStyle()" aria-hidden="true"></span></button>
        <button type="button" class="btn btn-outline-primary" style="display: inline;" @onclick="ToggleReferences"><span class="oi @getGlobalToggleRefsStyle()" aria-hidden="true"></span></button>
        <button type="button" class="btn btn-outline-primary" style="display: inline;" @onclick="IncreaseFont">
            <span class="oi oi-text" aria-hidden="true"></span>
            <span class="oi oi-plus" aria-hidden="true"></span>
        </button>
        <button type="button" class="btn btn-outline-primary" style="display: inline;" @onclick="DecreaseFont"><span class="oi oi-text" aria-hidden="true"></span><span class="oi oi-minus" aria-hidden="true"></span></button>
    </Bible_Blazer_PWA.Components.FloatingComponent>

    var composite = lesson.GetComposite();
    <MudContainer>
        <MudText Typo="Typo.h4" Style="overflow:hidden">@(composite.Value)</MudText>
        @foreach (LessonElementData data in composite.Children)
        {
            <CascadingValue Value="parameters">
                <LessonElement ElementData="data"></LessonElement>
            </CascadingValue>
        }
    </MudContainer>
    <NavLink class="nav-link" href="@($"/lessonNew/{Id-1}/{UnitNumber}")" Match="NavLinkMatch.All"><span class="oi oi-arrow-circle-left" aria-hidden="true"></span> Предыдущий урок</NavLink>
    <NavLink class="nav-link" href="@($"/lessonNew/{Id+1}/{UnitNumber}")" Match="NavLinkMatch.All"><span class="oi oi-arrow-circle-right" aria-hidden="true"></span> Следующий урок</NavLink>
}

@code {
    [Param]
    public int Id { get; set; } = 0;

    [Param]
    public int UnitNumber { get; set; } = 1;

    public string ToolsBackgroundColor { get; set; } = "white";

    protected LessonContainerDb lesson;
    private ParametersModel parameters;

    async protected override Task OnParametersSetAsync()
    {
        TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        var unitId = Unit.GetShortNameByUnitNumber(UnitNumber);
        var idStringified = Id.ToString();

        var resultHandler = await db.GetRecordFromObjectStoreByKey<LessonContainerDb>("lessons", unitId, Id.ToString());
        resultHandler.OnDbResultOK += () => { lesson = resultHandler.Result; taskCompletionSource.SetResult(); };
        await taskCompletionSource.Task;

        IconResolver iconReolver = new IconResolver();
        menu.Title = "";
        menu.AddMenuButton(new LessonLevelHandler(iconReolver, StateHasChanged, parameters));
        menu.AddMenuButton(new BibleRefToggleHandler(iconReolver, StateHasChanged, parameters));
        menu.Update(this);
    }

    protected async override Task OnInitializedAsync()
    {
        parameters = DbParameters.ParametersModel;
    }

    void ToggleReferences()
    {
        parameters.AreReferencesOpened = (!bool.Parse(parameters.AreReferencesOpened)).ToString();
    }

    async Task IncreaseFont()
    {
        var fontSizeParameter = Parameters.FontSize;
        int newFontSize = 15;
        if (int.TryParse((await DbParameters.GetParameterAsync(Parameters.FontSize)), out int fontSize))
        {
            newFontSize = fontSize + 1;
        }
        await DbParameters.SetParameterAsync(fontSizeParameter, $"{newFontSize}");
        if (int.TryParse((await DbParameters.GetParameterAsync(Parameters.FontSize, true)), out int fontSizeNew))
        {
            parameters.FontSize = fontSizeNew.ToString();
        }
    }

    async Task DecreaseFont()
    {
        var fontSizeParameter = Parameters.FontSize;
        int newFontSize = 15;
        if (int.TryParse((await DbParameters.GetParameterAsync(Parameters.FontSize)), out int fontSize))
        {
            newFontSize = fontSize - 1;
        }
        await DbParameters.SetParameterAsync(fontSizeParameter, $"{newFontSize}");
        if (int.TryParse((await DbParameters.GetParameterAsync(Parameters.FontSize, true)), out int fontSizeNew))
        {
            parameters.FontSize = fontSizeNew.ToString();
        }
    }

    void ToggleCollapse()
    {
        parameters.CollapseLevel = parameters.CollapseLevel switch
        {
            "3" => "1",
            "1" => "2",
            _ => "3"
        };
    }



    string getGlobalToggleCollapseStyle() => parameters.CollapseLevel switch
    {
        "1" => "oi-media-stop",
        "2" => "oi-grid-two-up",
        _ => "oi-grid-three-up"
    };

    string getGlobalToggleRefsStyle()
    {
        return bool.Parse(parameters.AreReferencesOpened) ? "oi-collapse-up" : "oi-collapse-down";
    }
}
