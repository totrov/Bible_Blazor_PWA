@page "/lessonNew/{Id:int}/{UnitNumber:int}"
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@namespace BibleComponents
@inject HttpClient Http
@inject DbParametersFacade DbParameters;
@using Bible_Blazer_PWA.Services.Menu
@inject MenuService menu
@inject NavigationManager NavigationManager
@using Bible_Blazer_PWA.DomainObjects;
@using Bible_Blazer_PWA.Parameters;
@using Param = Microsoft.AspNetCore.Components.ParameterAttribute
@using Bible_Blazer_PWA.Pages.Lesson
@using System.Text.RegularExpressions

@if (lesson != null)
{
    <MudContainer>
        <MudText Typo="Typo.h4" Style="overflow:hidden">@(Regex.Replace(Composite.Value,",(?=[а-яА-Яa-zA-Z])",", "))</MudText>
        @foreach (LessonElementData data in CompositeChildren)
        {
            <LessonElement ElementData="data"></LessonElement>
        }
        <MudButton OnClick="NavigatePrev" StartIcon="@Icons.Filled.ArrowBack">Предыдущий урок</MudButton>
        <MudButton OnClick="NavigateNext" EndIcon="@Icons.Filled.ArrowForward">Следующий урок</MudButton>
    </MudContainer>
}

@code {
    [Param]
    public int Id { get; set; } = 0;

    [Param]
    public int UnitNumber { get; set; } = 1;

    public string ToolsBackgroundColor { get; set; } = "white";

    protected LessonContainerDb lesson;
    private ParametersModel parameters;
    public LessonElementData Composite { get; set; }
    public LinkedList<LessonElementData> CompositeChildren { get; set; }

    async protected override Task OnParametersSetAsync()
    {
        var refreshNeeded = lesson != null;

        TaskCompletionSource taskCompletionSource = new TaskCompletionSource();
        var unitId = Unit.GetShortNameByUnitNumber(UnitNumber);
        var idStringified = Id.ToString();

        var resultHandler = await db.GetRecordFromObjectStoreByKey<LessonContainerDb>("lessons", unitId, Id.ToString());
        resultHandler.OnDbResultOK += () =>
        {
            lesson = resultHandler.Result;
            Composite = lesson.GetComposite();
            CompositeChildren = Composite.Children;
            taskCompletionSource.SetResult();
        };
        await taskCompletionSource.Task;

        IconResolver iconReolver = new IconResolver();
        menu.Title = "";
        menu.ClearMenuButtons();
        menu.AddMenuButton(new LessonLevelHandler(iconReolver, StateHasChanged, parameters));
        menu.AddMenuButton(new BibleRefToggleHandler(iconReolver, StateHasChanged, parameters));
        menu.AddMenuButton(new FontSizeIncreaseHandler(iconReolver, StateHasChanged, parameters));
        menu.AddMenuButton(new FontSizeDecreaseHandler(iconReolver, StateHasChanged, parameters));
        menu.Update(this);
        if (refreshNeeded)
        {
            StateHasChanged();
        }
    }

    protected async override Task OnInitializedAsync()
    {
        parameters = DbParameters.ParametersModel;
    }
    protected void NavigatePrev()
    {
        NavigationManager.NavigateTo($"/");
        NavigationManager.NavigateTo($"/lessonNew/{Id - 1}/{UnitNumber}");
    }

    protected void NavigateNext()
    {
        NavigationManager.NavigateTo($"/");
        NavigationManager.NavigateTo($"/lessonNew/{Id + 1}/{UnitNumber}");
    }
}
