@*
    [Param]
    public int Id { get; set; } = 0;

    [Param]
    public int UnitNumber { get; set; } = 1;

    public string ToolsBackgroundColor { get; set; } = "white";

    protected LessonDTO lesson;
    private ParametersModel parameters;
    public LessonElementData Composite { get; set; }
    public LessonLightweightDTO PrevLesson { get; set; } = null;
    public LessonLightweightDTO NextLesson { get; set; } = null;
    public LinkedList<LessonElementData> CompositeChildren { get; set; }
    private LessonDS _lessonDS;

    async protected override Task OnParametersSetAsync()
    {
        var refreshNeeded = lesson != null;

        Composite = await LessonElementData.GetLessonCompositeAsync(UnitNumber, Id, db, Http);
        CompositeChildren = Composite.Children;

        IconResolver iconReolver = new IconResolver();
        menu.Title = Regex.Replace(Composite.Value, ",(?=[а-яА-Яa-zA-Z])", ", ");
        menu.ClearMenuButtons();
        menu.AddMenuButton(new LessonLevelHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.AddMenuButton(new BibleRefToggleHandler(iconReolver, StateHasChanged, parameters)).Visible = parameters.HideBibleRefTabs != "True";
        menu.AddMenuButton(new FontSizeIncreaseHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.AddMenuButton(new FontSizeDecreaseHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.AddMenuButton(new NotesEditModeToggleHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.Update(this);
        if (refreshNeeded)
        {
            StateHasChanged();
        }
        _lessonDS = new LessonDS(db);
        LessonLightweightDTO[] lessons =
            (await _lessonDS.GetLessonLightweightDTOForBlock(Unit.GetShortNameByUnitNumber(UnitNumber))).Values.ToArray();
        for (int i = 0; i < lessons.Length; i++)
        {
            if (int.Parse(lessons[i].Id) == Id)
            {
                if (i > 0)
                {
                    PrevLesson = lessons[i - 1];
                }
                if (i < lessons.Length - 1)
                {
                    NextLesson = lessons[i + 1];
                }
            }
        }
    }


    //HashSet<Parameters> RefreshTriggers = new() {Parameters.BlocksPaddingLeft }
    protected async override Task OnInitializedAsync()
    {
        parameters = DbParameters.ParametersModel;
        DbParameters.OnChange += (param, value) => { StateHasChanged(); };
        parameters.NotesEnabled = true;
    }
    protected void NavigatePrev()
    {
        NavigationManager.NavigateTo($"/emptyPage");
        NavigationManager.NavigateTo($"/lesson/{PrevLesson.Id}/{UnitNumber}");
    }

    protected void NavigateNext()
    {
        NavigationManager.NavigateTo($"/emptyPage");
        NavigationManager.NavigateTo($"/lesson/{NextLesson.Id}/{UnitNumber}");
    }
}
*@