@page "/lesson/{Id:int}/{UnitNumber:int}"
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@namespace BibleComponents
@inject HttpClient Http
@inject DbParametersFacade DbParameters;
@using Bible_Blazer_PWA.Components
@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.DataSources
@using Bible_Blazer_PWA.Services.Menu
@inject MenuService menu
@inject NavigationManager NavigationManager
@using Bible_Blazer_PWA.DomainObjects;
@using Bible_Blazer_PWA.Parameters;
@using Param = Microsoft.AspNetCore.Components.ParameterAttribute
@using Bible_Blazer_PWA.Pages.Lesson
@using System.Text.RegularExpressions
@using static Bible_Blazer_PWA.DataSources.LessonDS

@if (Composite != null)
{
    <MudDropContainer @ref="_dropContainer" T="NoteDTO" Items="_items" ItemsSelector="@((item,dropzone) => item.Identifier == dropzone)" ItemDropped="ItemUpdated" Class="d-flex flex-wrap flex-grow-1">
        <ChildContent>
            <MudContainer>
                <MudText Typo="Typo.h4" Style="overflow:hidden">@(Regex.Replace(Composite.Value, ",(?=[а-яА-Яa-zA-Z])", ", "))</MudText>
                    @foreach (LessonElementData data in CompositeChildren)
                {
                    <LessonElement ElementData="data"></LessonElement>
                }
                <MudContainer Class="d-flex">
                    @if (PrevLesson != null)
                    {
                        <MudButton OnClick="NavigatePrev" StartIcon="@Icons.Filled.ArrowBack">@PrevLesson.Name</MudButton>
                    }
                    <MudSpacer />
                    @if (NextLesson != null)
                    {
                        <MudButton OnClick="NavigateNext" EndIcon="@Icons.Filled.ArrowForward">@NextLesson.Name</MudButton>
                    }
                </MudContainer>
            </MudContainer>
            @if (parameters.NotesEditMode)
            {
                <CenteredFixedContainer>
                    <MudDropZone T="NoteDTO" Identifier="Notes" Class="rounded mud-background-gray pa-6 flex-grow-1">
                        <MudText Typo="Typo.h6" Class="mb-4">Заметки</MudText>
                        @if (NewNoteOpen)
                        {
                            <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                                <MudTextField @bind-Value="NewNoteName" Placeholder="Новая заметка" DisableUnderLine="true" Lines="5" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                                <MudButton OnClick="@(() => AddTask())" Size="Size.Small" Color="Color.Primary" FullWidth="true">Добавить заметку</MudButton>
                            </MudPaper>
                        }
                        else
                        {
                            <MudButton OnClick="@(() => NewNoteOpen = !NewNoteOpen)" StartIcon="@Icons.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Добавить заметку</MudButton>
                        }
                    </MudDropZone>
                </CenteredFixedContainer>
            }
        </ChildContent>
        <ItemRenderer>
            <MudPaper Elevation="25" Class="pa-4 my-4">@context.Name</MudPaper>
        </ItemRenderer>
    </MudDropContainer>
}

@code {
    private MudDropContainer<NoteDTO> _dropContainer;
    bool NewNoteOpen { get; set; }
    string NewNoteName { get; set; }

    private void AddTask()
    {
        _items.Add(new NoteDTO { Name = NewNoteName, Identifier = "Notes" });
        NewNoteName = string.Empty;
        NewNoteOpen = false;
        _dropContainer.Refresh();
    }

    private void ItemUpdated(MudItemDropInfo<NoteDTO> dropItem)
    {
        dropItem.Item.Identifier = dropItem.DropzoneIdentifier;
    }

    private List<NoteDTO> _items = new()
    {
        new NoteDTO(){ Name = "Пример 1", Identifier = "Notes" },
        new NoteDTO(){ Name = "Пример 2", Identifier = "Notes" },
        new NoteDTO(){ Name = "Пример 3", Identifier = "Notes" },
    };

    [Param]
    public int Id { get; set; } = 0;

    [Param]
    public int UnitNumber { get; set; } = 1;

    public string ToolsBackgroundColor { get; set; } = "white";

    protected LessonDTO lesson;
    private ParametersModel parameters;
    public LessonElementData Composite { get; set; }
    public LessonLightweightDTO PrevLesson { get; set; } = null;
    public LessonLightweightDTO NextLesson { get; set; } = null;
    public LinkedList<LessonElementData> CompositeChildren { get; set; }
    private LessonDS _lessonDS;

    async protected override Task OnParametersSetAsync()
    {
        var refreshNeeded = lesson != null;

        Composite = await LessonElementData.GetLessonCompositeAsync(UnitNumber, Id, db, Http);
        CompositeChildren = Composite.Children;

        IconResolver iconReolver = new IconResolver();
        menu.Title = "";
        menu.ClearMenuButtons();
        menu.AddMenuButton(new LessonLevelHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.AddMenuButton(new BibleRefToggleHandler(iconReolver, StateHasChanged, parameters)).Visible = parameters.HideBibleRefTabs != "True";
        menu.AddMenuButton(new FontSizeIncreaseHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.AddMenuButton(new FontSizeDecreaseHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.AddMenuButton(new NotesEditModeToggleHandler(iconReolver, StateHasChanged, parameters)).Visible = true;
        menu.Update(this);
        if (refreshNeeded)
        {
            StateHasChanged();
        }
        _lessonDS = new LessonDS(db);
        LessonLightweightDTO[] lessons =
            (await _lessonDS.GetLessonLightweightDTOForBlock(Unit.GetShortNameByUnitNumber(UnitNumber))).Values.ToArray();
        for (int i = 0; i < lessons.Length; i++)
        {
            if (int.Parse(lessons[i].Id) == Id)
            {
                if (i > 0)
                {
                    PrevLesson = lessons[i - 1];
                }
                if (i < lessons.Length - 1)
                {
                    NextLesson = lessons[i + 1];
                }
            }
        }
    }


    //HashSet<Parameters> RefreshTriggers = new() {Parameters.BlocksPaddingLeft }
    protected async override Task OnInitializedAsync()
    {
        parameters = DbParameters.ParametersModel;
        DbParameters.OnChange += (param, value) => { StateHasChanged(); };
    }
    protected void NavigatePrev()
    {
        NavigationManager.NavigateTo($"/emptyPage");
        NavigationManager.NavigateTo($"/lesson/{PrevLesson.Id}/{UnitNumber}");
    }

    protected void NavigateNext()
    {
        NavigationManager.NavigateTo($"/emptyPage");
        NavigationManager.NavigateTo($"/lesson/{NextLesson.Id}/{UnitNumber}");
    }
}
