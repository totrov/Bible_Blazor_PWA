@page "/"
@using Bible_Blazer_PWA.Components
@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.DataSources
@using Bible_Blazer_PWA.Extensions
@using Bible_Blazer_PWA.Facades;
@using Bible_Blazer_PWA.Services
@using Bible_Blazer_PWA.Services.Menu
@using Bible_Blazer_PWA.Services.Parse
@using static Bible_Blazer_PWA.DataSources.LessonDS
@using Bible_Blazer_PWA.Config
@using Bible_Blazer_PWA.DomainObjects
@using System.Text.Json
@using System.IO

@inject MenuService menu
@inject HttpClient Http
@inject Corrector Corrector;
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject NavigationManager navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JS

@if (_blocks != null)
{
    <MudList Clickable="false">
        @foreach (LessonBlock block in _blocks.Values)
        {
            var header = block.Lessons.Any()
            ? $"{block.Name} ({block.Lessons.Last().Value.VersionDate.ToRussianDateFormatString()})"
            : block.Name;
            <MudListItem Text="@header">
                <NestedList>
                    @{
                        var loadAction = () => LoadFromAzure(@block.Name);
                    }
                    @if (IsDisabled)
                    {
                        <MudListItem>
                            <MudImage Src="/Assets/CloudLoading.gif" Width="50" Height="50"></MudImage>
                        </MudListItem>
                    }
                    else
                    {
                        if (!block.Lessons.Any())
                        {
                            <MudListItem Icon = "@Icons.Filled.CloudDownload" OnClick="loadAction" Disabled="IsDisabled" IconColor="Color.Primary">
                                Загрузить
                            </MudListItem>
                        }
                    }
                    @foreach (KeyValuePair<int, LessonLightweightDTO> keyValue in block.Lessons)
                    {
                        var lesson = keyValue.Value;

                        <MudListItem>
                            <NavLink class="nav-link" href="@($"lesson/{lesson.Id}/{Unit.GetUnitNumberByShortName(lesson.UnitId)}")" Match="NavLinkMatch.All">@lesson.Name</NavLink>
                        </MudListItem>
                    }
                </NestedList>
            </MudListItem>
        }
    </MudList>
}

@code {
    private LessonDS _lessonDS { get; set; }
    private SortedDictionary<string, LessonBlock> _blocks;
    private bool updateLessonsWasCalled = false;
    private LessonImportService lessonImportService;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !updateLessonsWasCalled)
        {
            var minimalVersion = await new HttpFacade(Http).GetVersionDateAsync();
            var lessonsToLoad = _blocks
                            .Where(b => !b.Value.Name.StartsWith("Д") && b.Value.Lessons.Any(l => l.Value.VersionDate < minimalVersion))
                            .Select(block => block.Value.Name).ToList();

            var debug = _blocks.SelectMany(b => b.Value.Lessons).Where(l => l.Value.VersionDate < minimalVersion).ToArray();
            IsDisabled = lessonsToLoad.Any();
            updateLessonsWasCalled = true;
            foreach (var lessonName in lessonsToLoad)
            {
                //await lessonImportService.RunAsync(s => s.LoadPredefinedLesson(lessonName));
                await lessonImportService.LoadPredefinedLesson(lessonName);
            }
            IsDisabled = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _lessonDS = new LessonDS(db);
        _blocks = await _lessonDS.GetBlocks();
        lessonImportService = new LessonImportService(Snackbar, Http, new Corrector(new BibleRegexHelper(Http)), JS);

        menu.Title = "Планы уроков";
        menu.ClearMenuButtons();

        var parameters = new DialogParameters();
        parameters.Add("LessonImportService", lessonImportService);
        parameters.Add("DisableEnableAction", (bool b) => { IsDisabled = b; });

        var actionableMenuButtons = new[]
        {
            menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.CloudDownload, () =>
            {
                var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
                DialogService.Show<LoadLessonsDialog>(
                    "Автоматическая загрузка",
                    parameters,
                    options);
            })),
            menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.UploadFile, () =>
            {
                var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
                DialogService.Show<ManualLessonLoadDialog>("Ручная загрузка уроков", parameters, options);
            })),
            menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.Delete, () =>
            {
                var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
                DialogService.Show<DeleteLoadedLessons>("Удалить загруженные уроки", options);
            }))
    };
        var loadingImage = menu.AddMenuButton(new EmptyButtonHandler("/Assets/CloudLoading.gif"));

        OnEnableDisable += boolean =>
        {
            actionableMenuButtons.Aggregate("", (str, button) => { button.Visible = !boolean; return ""; });
            loadingImage.Visible = boolean;
            menu.Update(this);
        };
        IsDisabled = false;

        menu.Update(this);
    }

    private bool _isDisabled = false;
    private bool IsDisabled { get => _isDisabled; set { _isDisabled = value; OnEnableDisable?.Invoke(_isDisabled); } }
    private event Action<bool> OnEnableDisable;
    public async Task LoadFromAzure(string lessonToLoad)
    {
        IsDisabled = true;
        try
        {
            await lessonImportService.LoadPredefinedLesson(lessonToLoad);
            //await lessonImportService.RunAsync(s => s.LoadPredefinedLesson(lessonToLoad));
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            IsDisabled = false;
        }
    }

    private async Task ReloadPage()
    {
        await Task.Delay(500);
        var currentUri = navigation.Uri;
        navigation.NavigateTo("/setup");
        navigation.NavigateTo(currentUri);
    }

    private void UpdateItemStatus(Services.LoadingItem item, string newStatus)
    {
        item.Status = newStatus;
        StateHasChanged();
    }
}





    @*    <h3>Ниже страницы уроков, сделанные без использования БД (будет удалено позже)</h3>

    <ul>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="test">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Виды дел
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="test2">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Виды дел +
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson1">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 1.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson4">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 4.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson5">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 5.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson6">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 6.
            </NavLink>
        </li>
    </ul>*@