@page "/"
@using Bible_Blazer_PWA.Components
@using Bible_Blazer_PWA.DataSources
@using Bible_Blazer_PWA.Services
@using Bible_Blazer_PWA.Services.Menu
@using Bible_Blazer_PWA.Services.Parse
@using BlazorWorker.Core
@using BlazorWorker.WorkerBackgroundService
@using static Bible_Blazer_PWA.DataSources.LessonDS
@using Bible_Blazer_PWA.Config
@using Bible_Blazer_PWA.DomainObjects
@using System.Text.Json
@using System.IO
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Demo.IoCExample
@using BlazorWorker.Extensions.JSRuntime

@inject MenuService menu
@inject HttpClient Http
@inject Corrector Corrector;
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject NavigationManager navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IWorkerFactory workerFactory

@if (_blocks != null)
{
    <MudExpansionPanels>
        @foreach (LessonBlock block in _blocks)
        {
            <MudExpansionPanel>
                <TitleContent>
                    <MudText Typo="Typo.h5">@block.Name</MudText>
                </TitleContent>
                <ChildContent>
                    <MudList Clickable="true">
                        @{
                            var loadAction = () => LoadFromAzure(@block.Name);
                        }
                        <MudFab Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Filled.CloudDownload"
                        @onclick="loadAction" Disabled="@IsDisabled" />
                        @foreach (LessonInfoLightweight lesson in block.Lessons)
                        {
                            <MudListItem>
                                <NavLink class="nav-link" href="@($"lessonNew/{lesson.Id}/{Unit.GetUnitNumberByShortName(lesson.UnitId)}")" Match="NavLinkMatch.All">@lesson.Name</NavLink>
                            </MudListItem>
                        }
                    </MudList>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>

    @foreach (var item in new string[] { "Persistant startup class", "Startup class disposed with service" })
    {
        <div>
            <input type="radio" name="variant" id="@item" value="@item" @onchange="RadioSelection" checked=@(RadioValue.Equals(item,StringComparison.OrdinalIgnoreCase)) />
            <label for="@item">@item</label>
        </div>
    }
    <button disabled=@RunDisabled @onclick=OnClick class="btn btn-primary">Run test</button>
    <br />
    <br />
    <pre>
        @output
    </pre>
}

@code {
    private LessonDS _lessonDS { get; set; }
    private LinkedList<LessonBlock> _blocks;

    protected override async Task OnInitializedAsync()
    {
        _lessonDS = new LessonDS(db);
        _blocks = await _lessonDS.GetBlocks();
        menu.Title = "Планы уроков";
        menu.ClearMenuButtons();
        menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.CloudDownload, () => {
            var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
            DialogService.Show<LoadLessonsDialog>("Автоматическая загрузка уроков", options);
        }));
        menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.UploadFile, () => {
            var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
            DialogService.Show<ManualLessonLoadDialog>("Ручная загрузка уроков", options);
        }));
        menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.Delete, () =>
        {
            var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
            DialogService.Show<DeleteLoadedLessons>("Удалить загруженные уроки", options);
        }));

        menu.Update(this);
    }

    private bool IsDisabled { get; set; } = false;

    public async Task LoadFromAzure(string lessonToLoad)
    {
        var parameters = new DialogParameters();
        parameters.Add("ImagePath", "/Assets/CloudLoading.gif");
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, DisableBackdropClick = true };
        DialogService.Show<ImageDialog>($"Загрузка урока {lessonToLoad}", parameters, options);

        var importHandler = new SnackbarImportHandler(null, Snackbar);
        LessonImporter importer = new LessonImporter(Http, Corrector, db, importHandler);
        await importer.LoadPredefinedLesson(lessonToLoad).ContinueWith(async any => { await ReloadPage(); });
    }

    private async Task ReloadPage()
    {
        await Task.Delay(500);
        var currentUri = navigation.Uri;
        navigation.NavigateTo("/setup");
        navigation.NavigateTo(currentUri);
    }

    private void UpdateItemStatus(Services.LoadingItem item, string newStatus)
    {
        item.Status = newStatus;
        StateHasChanged();
    }



    ///////////////////////////////////////BlazorWorkerTest//////////////////////////////////////////////////


    string output = "";
    IWorker worker;
    IWorkerBackgroundService<LessonImportServiceStartup> startupService;
    string canDisposeWorker => worker == null ? null : "disabled";
    string RunDisabled => Running ? "disabled" : null;
    bool Running = false;
    string RadioValue = "Persistant startup class";
    void RadioSelection(ChangeEventArgs args)
    {
        RadioValue = args.Value.ToString();
    }
    public async Task OnClick(EventArgs _)
    {
        Running = true;
        var rn = Environment.NewLine;
        try
        {

            if (worker == null)
            {
                worker = await workerFactory.CreateAsync();
            }

            var sw = new System.Diagnostics.Stopwatch();
            IWorkerBackgroundService<LessonImportService> myIocService;
            var persistedStartup = RadioValue == "Persistant startup class";

            var serviceCollectionDependencies = new string[] {
                    "Microsoft.Extensions.DependencyInjection.Abstractions.dll",
#if NET5_0_OR_GREATER
                "System.Diagnostics.Tracing.dll",
#endif
#if NET6_0_OR_GREATER
                "Microsoft.Extensions.DependencyInjection.dll",
#endif
            "System.Security.Cryptography.X509Certificates.dll",
            "DocumentFormat.OpenXml.Wordprocessing.dll",
            "BlazorWorker.BackgroundServiceFactory.dll",
            "BlazorWorker.WorkerBackgroundService.dll",
            "DocumentFormat.OpenXml.Packaging.dll",
            "BlazorWorker.WorkerCore.dll",
            "DocumentFormat.OpenXml.dll",
            "DocumentFormat.OpenXml.dll",
            "System.Net.Primitives.dll",
            "System.IO.Compression.dll",
            "System.Xml.XDocument.dll",
            "System.Net.Http.Json.dll",
            "System.Net.Requests.dll",
            "System.Net.Security.dll",
            "System.IO.Packaging.dll",
            "BlazorWorker.Core.dll",
            "System.Net.Http.dll",
            "MudBlazor.dll"
    };
            if (persistedStartup)
            {
                if (startupService == null)
                {
                    StateHasChanged();

                    sw.Start();
                    startupService = await worker.CreateBackgroundServiceAsync<LessonImportServiceStartup>(wo =>
                        wo.AddBlazorWorkerJsRuntime()
                          .AddConventionalAssemblyOfService()
                          .AddHttpClient()
                          .AddAssemblyOf<Microsoft.Extensions.DependencyInjection.ServiceCollection>()
                          .AddAssemblies(serviceCollectionDependencies)
                        );
                    worker.IncomingMessage += OnWorkerMessage;
                    StateHasChanged();
                }
                myIocService = await startupService.CreateBackgroundServiceAsync(startup => startup.Resolve<LessonImportService>());
            }
            else
            {
                myIocService = await worker.CreateBackgroundServiceUsingFactoryAsync<LessonImportServiceStartup, LessonImportService>(
                    startup => startup.Resolve<LessonImportService>(), wo =>
                        wo.AddConventionalAssemblyOfService()
                            .AddHttpClient()
                            .AddAssemblyOf<Microsoft.Extensions.DependencyInjection.ServiceCollection>()
                            .AddAssemblies(serviceCollectionDependencies)
                            .AddBlazorWorkerJsRuntime()
                            );
            }

            await using (myIocService)
            {
                //await myIocService.RegisterEventListenerAsync(nameof(LessonImportService.FiveCalled),
                //       (object s, int five) =>
                //       {
                //           output += $"{rn}{LogDate()} OnFiveCalled: {five}";
                //           StateHasChanged();
                //       });
                await myIocService.RunAsync(s => s.LoadPredefinedLesson("Бытие"));
            }

            StateHasChanged();

        }
        catch (Exception e)
        {
            output += $"{rn}Error = {e}";
        }
        finally
        {
            Running = false;
        }
    }

    public void OnWorkerMessage(object sender, string message)
    {
        output += message;
        StateHasChanged();
    }

    public async Task OnDisposeWorker()
    {
        await worker.DisposeAsync();
        worker = null;
        startupService = null;
    }
}



                

    @*    <h3>Ниже страницы уроков, сделанные без использования БД (будет удалено позже)</h3>

    <ul>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="test">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Виды дел
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="test2">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Виды дел +
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson1">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 1.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson4">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 4.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson5">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 5.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson6">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 6.
            </NavLink>
        </li>
    </ul>*@