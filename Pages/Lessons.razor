@page "/"
@using Bible_Blazer_PWA.Components
@using Bible_Blazer_PWA.DataSources
@using Bible_Blazer_PWA.Extensions
@using Bible_Blazer_PWA.Services
@using Bible_Blazer_PWA.Services.Menu
@using Bible_Blazer_PWA.Services.Parse
@using BlazorWorker.Core
@using BlazorWorker.WorkerBackgroundService
@using static Bible_Blazer_PWA.DataSources.LessonDS
@using Bible_Blazer_PWA.Config
@using Bible_Blazer_PWA.DomainObjects
@using System.Text.Json
@using System.IO
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Demo.IoCExample
@using BlazorWorker.Extensions.JSRuntime

@inject MenuService menu
@inject HttpClient Http
@inject Corrector Corrector;
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject NavigationManager navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IWorkerFactory workerFactory

@if (_blocks != null)
{
    <MudExpansionPanels>
        @foreach (LessonBlock block in _blocks.Values)
        {
            <MudExpansionPanel>
                <TitleContent>
                    <MudText Typo="Typo.h5">@block.Name</MudText>
                </TitleContent>
                <ChildContent>
                    <MudList Clickable="true">
                        @{
                            var loadAction = () => LoadFromAzure(@block.Name);
                        }
                        @if (IsDisabled)
                        {
                            <MudImage Src="/Assets/CloudLoading.gif" Width="50" Height="50"></MudImage>
                        }
                        else
                        {
                            <MudFab Size="Size.Small" Color="Color.Primary" StartIcon="@Icons.Filled.CloudDownload"
                                @onclick="loadAction" Disabled="@IsDisabled" />
                        }
                        @foreach (KeyValuePair<int, LessonInfoLightweight> keyValue in block.Lessons)
                        {
                            var lesson = keyValue.Value;

                            <MudListItem>
                                <NavLink class="nav-link" href="@($"lessonNew/{lesson.Id}/{Unit.GetUnitNumberByShortName(lesson.UnitId)}")" Match="NavLinkMatch.All">@lesson.Name</NavLink>
                            </MudListItem>
                        }
                    </MudList>
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}

@code {
    private LessonDS _lessonDS { get; set; }
    private SortedDictionary<string, LessonBlock> _blocks;

    protected override async Task OnInitializedAsync()
    {
        _lessonDS = new LessonDS(db);
        _blocks = await _lessonDS.GetBlocks();
        menu.Title = "Планы уроков";
        menu.ClearMenuButtons();
        var actionableMenuButtons = new[]
        {
            menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.CloudDownload, () =>
            {
                var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
                var parameters = new DialogParameters();
                parameters.Add("LessonImportService", lessonImportService);
                parameters.Add("DisableEnableAction", (bool b) => { IsDisabled = b; });
                DialogService.Show<LoadLessonsDialog>(
                    "Автоматическая загрузка уроков",
                    parameters,
                    options);
            })),
            menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.UploadFile, () =>
            {
                var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
                DialogService.Show<ManualLessonLoadDialog>("Ручная загрузка уроков", options);
            })),
            menu.AddMenuButton(new SimpleActionButtonHandler(Icons.Filled.Delete, () =>
            {
                var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
                DialogService.Show<DeleteLoadedLessons>("Удалить загруженные уроки", options);
            }))
    };
        var loadingImage = menu.AddMenuButton(new EmptyButtonHandler("/Assets/CloudLoading.gif"));

        OnEnableDisable += boolean =>
        {
            actionableMenuButtons.Aggregate((button1, button2) => { button2.Visible = !boolean; return button2; });
            loadingImage.Visible = boolean;
            menu.Update(this);
        };
        IsDisabled = false;

        menu.Update(this);

        messageParser = new();
        messageParser.OnDBPut += HandleLessonDBPut;
        messageParser.OnWarning += s => Snackbar.Add(s, Severity.Warning);
        messageParser.OnMessage += s => Snackbar.Add(s, Severity.Normal);
        messageParser.OnInfo += s => Snackbar.Add(s, Severity.Info);
        messageParser.OnError += s => Snackbar.Add(s, Severity.Error);
        messageParser.OnSuccess += s => Snackbar.Add(s, Severity.Success);

        if (worker == null)
        {
            worker = await workerFactory.CreateAsync();
        }

        var serviceCollectionDependencies = new string[] {
                    "Microsoft.Extensions.DependencyInjection.Abstractions.dll",
#if NET5_0_OR_GREATER
                "System.Diagnostics.Tracing.dll",
#endif
#if NET6_0_OR_GREATER
                "Microsoft.Extensions.DependencyInjection.dll",
#endif
            "System.Security.Cryptography.X509Certificates.dll",
            "DocumentFormat.OpenXml.Wordprocessing.dll",
            "BlazorWorker.BackgroundServiceFactory.dll",
            "BlazorWorker.WorkerBackgroundService.dll",
            "DocumentFormat.OpenXml.Packaging.dll",
            "BlazorWorker.WorkerCore.dll",
            "DocumentFormat.OpenXml.dll",
            "DocumentFormat.OpenXml.dll",
            "System.Net.Primitives.dll",
            "System.IO.Compression.dll",
            "System.Xml.XDocument.dll",
            "System.Net.Http.Json.dll",
            "System.Net.Requests.dll",
            "System.Net.Security.dll",
            "System.IO.Packaging.dll",
            "BlazorWorker.Core.dll",
            "System.Net.Http.dll",
            "MudBlazor.dll"
        };

        if (startupService == null)
        {
            try
            {
                startupService = await worker.CreateBackgroundServiceAsync<LessonImportServiceStartup>(wo =>
                    wo.AddBlazorWorkerJsRuntime()
                        .AddConventionalAssemblyOfService()
                        .AddHttpClient()
                        .AddAssemblyOf<Microsoft.Extensions.DependencyInjection.ServiceCollection>()
                        .AddAssemblies(serviceCollectionDependencies)
                    );
                worker.IncomingMessage += OnWorkerMessage;
                lessonImportService = await startupService.CreateBackgroundServiceAsync(startup => startup.Resolve<LessonImportService>());
            }
            catch (Exception e)
            {
                Snackbar.Add(e.Message, Severity.Error);
            }
        }
    }

    private bool _isDisabled = false;
    private bool IsDisabled { get => _isDisabled; set { _isDisabled = value; OnEnableDisable?.Invoke(_isDisabled); } }
    private event Action<bool> OnEnableDisable;
    public async Task LoadFromAzure(string lessonToLoad)
    {
        IsDisabled = true;
        try
        {
            await lessonImportService.RunAsync(s => s.LoadPredefinedLesson(lessonToLoad));
        }
        catch (Exception e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        finally
        {
            IsDisabled = false;
        }
    }

    private async Task ReloadPage()
    {
        await Task.Delay(500);
        var currentUri = navigation.Uri;
        navigation.NavigateTo("/setup");
        navigation.NavigateTo(currentUri);
    }

    private void UpdateItemStatus(Services.LoadingItem item, string newStatus)
    {
        item.Status = newStatus;
        StateHasChanged();
    }



    ///////////////////////////////////////BlazorWorkerTest//////////////////////////////////////////////////


    string output { get; set; }
    IWorker worker;
    WebWorkerMessageParser messageParser;
    IWorkerBackgroundService<LessonImportServiceStartup> startupService;
    IWorkerBackgroundService<LessonImportService> lessonImportService;
    string canDisposeWorker => worker == null ? null : "disabled";
    string RunDisabled => Running ? "disabled" : null;
    bool Running = false;

    public void OnWorkerMessage(object sender, string message)
    {
        messageParser.ParseMessage(message);
        StateHasChanged();
    }

    public void HandleLessonDBPut(string json)
    {
        var lessonInfo = System.Text.Json.JsonSerializer.Deserialize<LessonInfoLightweight>(json);
        string blockName = lessonInfo.UnitId switch
        {
            "Быт" => "Бытие",
            "ИсхСол" => "Исход - Соломон",
            "Прор" => "Пророки",
            "Евн" => "Евангелия",
            "ДеянОткр" => "Деяния - Откровение",
            "Осн" => "Основы веры"
        };
        _blocks[blockName].Lessons.Put(Convert.ToInt32(lessonInfo.Id), lessonInfo);
        lessonImportService.RunAsync(s => s.NotifyImportCompleted());
    }

    public async Task OnDisposeWorker()
    {
        await worker.DisposeAsync();
        worker = null;
        startupService = null;
    }
}





    @*    <h3>Ниже страницы уроков, сделанные без использования БД (будет удалено позже)</h3>

    <ul>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="test">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Виды дел
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="test2">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Виды дел +
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson1">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 1.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson4">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 4.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson5">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 5.
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="lesson6">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Урок 6.
            </NavLink>
        </li>
    </ul>*@