@using Bible_Blazer_PWA.Config
@using System.Text.Json
@using Bible_Blazer_PWA.Services
@using Bible_Blazer_PWA.Services.Parse
@using BlazorWorker.WorkerBackgroundService
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject HttpClient Http
@inject Corrector Corrector;
@inject ISnackbar Snackbar;
@inject NavigationManager navigation;

<MudContainer>
    <h6>Последнее обновление:@LastUpdate</h6>
    <MudGrid>
        <MudItem xs="8">
            <MudSelect T="string" Label="Какие уроки загрузить:" MultiSelection="true" @bind-Value="selectedLessonsValue" @bind-SelectedValues="options">
                @foreach (var lessonName in lessonNames)
                {
                    <MudSelectItem T="string" Value="@lessonName">@lessonName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="4">
            <MudFab Color="Color.Primary" StartIcon="@Icons.Filled.CloudDownload"
                    @onclick="()=>LoadFromAzure(options)" />
        </MudItem>
    </MudGrid>
</MudContainer>
@code {
    private string LastUpdate { get; set; } = $"{LessonLoadConfig.GetOfflineVersionDate().ToRussianDateFormatString()} (для более свежей версии необходимо интернет соединение)";
    private string selectedLessonsValue { get; set; } = "Ничего не выбрано";
    private IEnumerable<string> lessonNames = LessonLoadConfig.GetLessonNames();
    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    [Parameter]
    public IWorkerBackgroundService<LessonImportService> LessonImportService { get; set; }
    [Parameter]
    public Action<bool> DisableEnableAction { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    protected async override Task OnInitializedAsync()
    {
        lessonNames.ToList().ForEach(l => ((HashSet<string>)options).Add(l));
        using var httpClient = new HttpClient();
        httpClient.BaseAddress = new Uri("https://covenant-of-christ.onrender.com");
        try
        {
            string manifestString = await httpClient.GetStringAsync(
                Config.LessonLoadConfig.GetManifestUrl());
            LessonStorageManifestDTO manifest = JsonSerializer.Deserialize<LessonStorageManifestDTO>(manifestString);
            LastUpdate = manifest?.lastUpdateDate.ToRussianDateFormatString();
        }
        catch (Exception ex)
        {
            db.JSLog(ex.Message);
        }
    }

    public async Task LoadFromAzure(IEnumerable<string> lessonsToLoad)
    {
        DisableEnableAction(true);
        MudDialog.Close(DialogResult.Ok(true));
        foreach (var lessonName in lessonsToLoad)
        {
            await LessonImportService.RunAsync(s => s.LoadPredefinedLesson(lessonName));
        }
        DisableEnableAction(false);
    }
}
