@using BibleComponents;
@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.DataBase;
@using Bible_Blazer_PWA.ViewModels;
@inject DatabaseJSFacade db;

@if (model != null)
{
    @if (model.IsCollapsed)
    {
        <MudCard Style="@StyleCollapsed"
         @onmousedown="@((MouseEventArgs args) => HandleDragStart(args))"
         @onmousemove="@((MouseEventArgs args) => HandleMouseMove(args))"
         @onmouseup="@(async (MouseEventArgs args) => {await HandleDrop(args);})"
         @ontouchstart="@((TouchEventArgs args) => HandleDragStart(args))"
         @ontouchmove="@((TouchEventArgs args) => HandleTouchMove(args))"
         @ontouchend="@(async (TouchEventArgs args) => {await HandleDrop(args);})">
            <MudCardHeader Style="padding: 0;">
                <MudIconButton Style="padding: 3px;" Icon="@Icon" OnClick="()=>{model.IsCollapsed = false; ShowNoteToolbar=false;}"></MudIconButton>
            </MudCardHeader>
        </MudCard>
    }
    else
    {
        <MudCard Style="@Style"
         @onmousedown="@((MouseEventArgs args) => HandleDragStart(args))"
         @onmousemove="@((MouseEventArgs args) => HandleMouseMove(args))"
         @onmouseup="@(async (MouseEventArgs args) => {await HandleDrop(args);})"
         @ontouchstart="@((TouchEventArgs args) => HandleDragStart(args))"
         @ontouchmove="@((TouchEventArgs args) => HandleTouchMove(args))"
         @ontouchend="@(async (TouchEventArgs args) => {await HandleDrop(args);})"
         @onmouseover="()=>{ShowNoteToolbar=true;}"
         @onmouseleave="()=>{ShowNoteToolbar=false; EditMode = false;}">
            @if (ShowNoteToolbar)
            {
                <MudCardHeader Class="d-flex" Style="padding: 0;">
                    <MudIconButton Style="padding: 2px;" OnClick="() => {model.IsCollapsed = true;}" Icon="@Icons.Filled.ExpandLess"></MudIconButton>
                    <MudToggleIconButton Style="padding: 2px;" @bind-Toggled="@EditMode" Icon="@Icons.Filled.ModeEdit" ToggledIcon="@Icons.Filled.EditOff" />
                    <MudIconButton Style="padding: 2px;" Icon="@Icons.Outlined.Settings" OnClick="EditNote"></MudIconButton>

                    <MudSpacer></MudSpacer>

                    <MudIconButton Style="padding: 2px;" OnClick="() => {IsPinned = !IsPinned;}" Icon="@PinIcon"></MudIconButton>
                </MudCardHeader>
            }
            <MudCardContent Style="padding: 3px 15px;">
                @if (EditMode)
                {
                    <MudTextField @bind-Value="@NoteValue" Style="@ColorStyle" DisableUnderLine="true" Lines="5" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                }
                else
                {
                    @((MarkupString)model?.Value?.Replace("\n", "<br>"))
                }
            </MudCardContent>

        </MudCard>
    }
}

@code {
    double _mouseRelativeToDraggedElementX = 0;
    double _mouseRelativeToDraggedElementY = 0;
    double _newPositionX = 0;
    double _newPositionY = 0;
    bool ShowNoteToolbar = false;
    bool IsPinned { get; set; } = false;
    bool EditMode { get; set; } = false;
    string NoteValue
    {
        get => model.Value;
        set => model.SetValue(model => model.Value, value);
    }
    string PinIcon
    {
        get
        {
            return IsPinned ? @Icons.Filled.PushPin : @Icons.Outlined.PushPin;
        }
    }

    string Icon
    {
        get
        {
            return model.Type switch
            {
                NoteDTO.NoteType.Attention => Icons.Filled.PriorityHigh,
                NoteDTO.NoteType.Question => Icons.Filled.QuestionMark,
                _ => @Icons.Filled.EditNote
            };
        }
    }

    string TouchAction { get => IsPinned ? "" : "touch-action: none;"; }

    string ColorStyle
    {
        get => $"background-color:{model.MainColor};color:{model.TextColor};";
    }

    string Style
    {
        get => $"{TouchAction}{ColorStyle}font-size:{model.TextSize}px;z-index:1; width:{model.Width}px; height:{model.Height}px; position: absolute; overflow:auto; top: {model.Y}px; left: {model.X}px;opacity:{Opacity};";
    }

    string StyleCollapsed
    {
        get => $"background-color:{model.MainColor};color:{model.TextColor};touch-action: none;z-index:1; position: absolute; overflow:auto; top: {model.Y}px; left: {model.X}px;opacity:{Opacity};";
    }
    string Opacity
    {
        get
        {
            if (model.Opacity is < 0 or >= 10)
            {
                return "1.0";
            }
            return "0." + model.Opacity.ToString();
        }
    }

    bool MouseDown { get; set; } = false;

    [Parameter]
    public NoteDTO NoteDTO { get; set; }
    [Parameter]
    public LessonElementMediator Mediator { get; set; }

    private NoteModel model;

    protected void EditNote() => Mediator.SetEditNote(model);

    protected override void OnParametersSet()
    {
        model = new NoteModel(NoteDTO);
        model.OnPropertyChange += StateHasChanged;
        model.OnPropertyChange += async () => { await model.SaveToDbAsync(db); };
    }

    private void HandleDragStart(dynamic args)
    {
        if (IsPinned)
            return;

        if (args.GetType() == typeof(MouseEventArgs))
        {
            _newPositionX = args.ClientX;
            _newPositionY = args.ClientY;
            _mouseRelativeToDraggedElementX = _newPositionX - model.X;
            _mouseRelativeToDraggedElementY = _newPositionY - model.Y;
            MouseDown = true;
        }
        else if (args.GetType() == typeof(TouchEventArgs))
        {
            _newPositionX = args.TargetTouches[0].PageX;
            _newPositionY = args.TargetTouches[0].PageY;
            _mouseRelativeToDraggedElementX = args.TargetTouches[0].PageX - model.X;
            _mouseRelativeToDraggedElementY = args.TargetTouches[0].PageY - model.Y;
        }
    }

    private void HandleTouchMove(TouchEventArgs args)
    {
        if (IsPinned)
            return;

        _newPositionX = args.TargetTouches[0].PageX;
        _newPositionY = args.TargetTouches[0].PageY;
        model.SetValue(model => model.X, Convert.ToInt32((_newPositionX - _mouseRelativeToDraggedElementX)));
        model.SetValue(model => model.Y, Convert.ToInt32((_newPositionY - _mouseRelativeToDraggedElementY)));
    }

    private void HandleMouseMove(MouseEventArgs args)
    {
        if (IsPinned)
            return;

        if (MouseDown)
        {
            _newPositionX = args.ClientX;
            _newPositionY = args.ClientY;
            model.SetValue(model => model.X, Convert.ToInt32((_newPositionX - _mouseRelativeToDraggedElementX)));
            model.SetValue(model => model.Y, Convert.ToInt32((_newPositionY - _mouseRelativeToDraggedElementY)));
        }
    }

    private async Task HandleDrop(dynamic args)
    {
        if (IsPinned)
            return;

        int X = 0;
        int Y = 0;

        if (args.GetType() == typeof(MouseEventArgs))
        {
            MouseDown = false;
            X = Convert.ToInt32((_newPositionX - _mouseRelativeToDraggedElementX));
            Y = Convert.ToInt32((_newPositionY - _mouseRelativeToDraggedElementY));
        }
        else if (args.GetType() == typeof(TouchEventArgs))
        {
            X = Convert.ToInt32((_newPositionX - _mouseRelativeToDraggedElementX));
            Y = Convert.ToInt32((_newPositionY - _mouseRelativeToDraggedElementY));
        }

        model.SetValue(model => model.X, X);
        model.SetValue(model => model.Y, Y);
    }
}