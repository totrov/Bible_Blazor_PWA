@namespace BibleComponents
@using Bible_Blazer_PWA.Components
@using Bible_Blazer_PWA.DataBase;
@using Bible_Blazer_PWA.Parameters;
@using Bible_Blazer_PWA.ViewModels;
@using MudBlazor.Utilities;
@using Bible_Blazer_PWA.Components.Interactor
@inject DbParametersFacade DbParameters;
@inject DatabaseJSFacade db;

@if (Visible)
{
    <CenteredFixedContainer ref="child" Bottom="IsBottom">
        @InteractionRender
    </CenteredFixedContainer>

    @*@switch (parameters)
    {
        case { NoteForEdit: not null }:
            <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                <MudIconButton Icon="@Icons.Filled.TextIncrease" OnClick="()=>{note.SetValue(note=>note.TextSize, note.TextSize+1);}"></MudIconButton>
                <MudIconButton Icon="@Icons.Filled.TextDecrease" OnClick="()=>{note.SetValue(note=>note.TextSize, note.TextSize-1);}"></MudIconButton>
                <MudColorPicker Label="Основной цвет" Value="_mainColor" ValueChanged="UpdateMainColor" DisableAlpha="true" ColorPickerView="ColorPickerView.Grid" />
                <MudColorPicker Label="Цвет текста" Value="_textColor" ValueChanged="UpdateTextColor" DisableAlpha="true" ColorPickerView="ColorPickerView.Grid" />
                <MudSlider @bind-Value="@NoteWidth" Min="30" Max="500" Step="10" Color="Color.Primary">Ширина: @parameters.NoteForEdit.Width.ToString()</MudSlider>
                <MudSlider @bind-Value="@NoteHeight" Min="30" Max="500" Step="10" Color="Color.Primary">Высота: @parameters.NoteForEdit.Height.ToString()</MudSlider>
                <MudSlider @bind-Value="@NoteOpacity" Min="0" Max="10" Step="1" Color="Color.Primary">Прозрачность: @parameters.NoteForEdit.Opacity.ToString()</MudSlider>
                <MudRadioGroup Style="text-align: center;" T="NoteModel.NoteType" @bind-SelectedOption="@NoteType">
                    <MudRadio Option="NoteModel.NoteType.Regular" Color="Color.Primary" UnCheckedColor="Color.Default">Заметка</MudRadio>
                    <MudRadio Option="NoteModel.NoteType.Question" Color="Color.Success" UnCheckedColor="Color.Default">Вопрос</MudRadio>
                    <MudRadio Option="NoteModel.NoteType.Attention" Color="Color.Secondary" UnCheckedColor="Color.Default">Важно!</MudRadio>
                </MudRadioGroup>
                <MudContainer Class="d-flex">
                    <MudButton Icon="@Icons.Filled.RemoveCircle" OnClick="RemovePrompt" Color="Color.Error">Удалить заметку</MudButton>
                    <MudSpacer></MudSpacer>
                    <MudButton Icon="@Icons.Filled.RemoveCircle" OnClick="CloseEdit" Color="Color.Primary">Закрыть</MudButton>
                </MudContainer>
            </MudPaper>
            break;
    }*@
}

@code {
    [Microsoft.AspNetCore.Components.Parameter]
    public bool Visible { get; set; }

    public bool IsBottom { get; set; }
    private RenderFragment? InteractionRender { get; set; }
    private CenteredFixedContainer child;

    public void SetInteractionModel(IInteractionModel model)
    {
        if (model == null)
        {
            InteractionRender = null;
            return;
        }

        model.OnClose += () => { SetInteractionModel(null); };
        InteractionRender = builder =>
        {
            builder.OpenComponent(0, model.ComponentType);
            builder.AddAttribute(1, "InteractionModel", model);
            builder.CloseComponent();
        };

        if (child != null)
        {
            child.SetBottom(model.IsBottom);
        }
    }

    private void CloseEdit()
    {
        parameters.NoteForEdit = null;
    }
    private NoteModel note { get => DbParameters.ParametersModel.NoteForEdit; }
    private int NoteWidth { get => note.Width; set => note.SetValue(note => note.Width, value); }
    private int NoteHeight { get => note.Height; set => note.SetValue(note => note.Height, value); }
    private int NoteOpacity { get => note.Opacity; set => note.SetValue(note => note.Opacity, value); }
    private NoteModel.NoteType NoteType { get => note.Type; set => note.SetValue(note => note.Type, value); }

    private ParametersModel parameters;
    public MudColor _mainColor = "#ffd700";
    public MudColor _textColor = "#111111";

    protected async override Task OnInitializedAsync()
    {
        parameters = DbParameters.ParametersModel;

    }


    public void UpdateMainColor(MudColor value)
    {
        _mainColor = value;
        note.SetValue(note => note.MainColor, value.ToString());
    }

    public void UpdateTextColor(MudColor value)
    {
        _textColor = value;
        note.SetValue(note => note.TextColor, value.ToString());
    }

    public void Refresh()
    {
        StateHasChanged();
    }
}
