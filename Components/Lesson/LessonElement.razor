@namespace BibleComponents
@using Bible_Blazer_PWA.BibleReferenceParse
@using Bible_Blazer_PWA.Components;
@using Bible_Blazer_PWA.Components.Interactor;
@using Bible_Blazer_PWA.DataSources
@using Bible_Blazer_PWA.DomainObjects
@using Bible_Blazer_PWA.Parameters
@using Bible_Blazer_PWA.Services.Menu;
@using Bible_Blazer_PWA.Services.Parse
@using Param = Microsoft.AspNetCore.Components.ParameterAttribute
@inject BibleService Bible
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject DbParametersFacade dbParamFacade;
@inject Corrector Corrector;

<MudCard class="card" style="@CardStyle" Elevation="0" id="@ElementData.GetAnchor()">
    <LessonElementHeader Mediator="@mediator"></LessonElementHeader>
    <LessonElementBody Mediator="@mediator"></LessonElementBody>
</MudCard>

@code {
    internal string CardStyle { get => $"margin-top:{mediator.MarginTop};{mediator.Border};overflow-wrap: anywhere;"; }

    private int activeNumber = 0;
    private bool _versesLoaded = false;


    protected Dictionary<string, IEnumerable<BibleService.VersesView>> _versesViewsDictionary;
    protected int CurrentPopoverIndex { get; set; } = -1;
    private LessonElementMediator mediator;

    [Param]
    public LessonElementData ElementData { get; set; }
    [Param]
    public InteractionPanel InteractionPanel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        mediator = new();
        //mediator.MenuService = menu;
        mediator.StateHasChanged += (type) => { if (type == typeof(InteractionPanel)) InteractionPanel.Refresh(); };
        mediator.Parameters = dbParamFacade.ParametersModel;
        mediator.ElementData = ElementData;

        Parser parser = new Parser(Corrector);
        parser.ParseTextLineWithBibleReferences(ElementData.Value);
        mediator.VersesProvider = new VersesProvider(parser.GetBibleReferences(), Bible);
        mediator.LessonElementTokens = parser.GetTokens();
        Task versesLoadTask = mediator.VersesProvider.LoadVerses();

        mediator.DbParamFacade = dbParamFacade;
        mediator.DbFacade = db;
        await versesLoadTask;
    }



    private void SetActive(MouseEventArgs e, int buttonNumber)
    {
        activeNumber = buttonNumber;
    }

    private bool IsActive(int buttonNumber)
    {
        return activeNumber == buttonNumber;
    }
}