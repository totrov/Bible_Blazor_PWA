@namespace BibleComponents

<MudCardContent Style="@CardContentStyle">
    @if (Mediator.HasBibleReferences)
    {
        <LessonElementReferences Mediator="Mediator"></LessonElementReferences>
    }
    @if (Mediator.ElementData.Children != null)
    {
        var visibilityStyle = Mediator.ElementData.Level < int.Parse(Mediator.Parameters.CollapseLevel) && Mediator.IsOpen ? "" : "display:none;";
        var subelementStyle = $"padding:{(double.Parse(Mediator.Parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
        $"{(double.Parse(Mediator.Parameters.BlocksPaddingRight) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
        $" {(double.Parse(Mediator.Parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
        $" {(double.Parse(Mediator.Parameters.BlocksPaddingLeft) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem;"
        + $" {visibilityStyle}";
        <div style="@subelementStyle">
            @foreach (LessonElementData data in Mediator.ElementData.Children)
            {
                <LessonElement ElementData="data"></LessonElement>
            }
        </div>
    }
</MudCardContent>

@code {
    [Parameter]
    public LessonElementMediator Mediator { get; set; }

    string ContentPaddingStyle {
        get => $"padding:{(double.Parse(Mediator.Parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
                                    $" {(double.Parse(Mediator.Parameters.BlocksPaddingRight) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
                                    $" {(double.Parse(Mediator.Parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
                                    $" {(double.Parse(Mediator.Parameters.BlocksPaddingLeft) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem;";
    }
    string CardContentStyle
    {
        get => $"background-color:{Mediator.BodyBackgroundColor}; {ContentPaddingStyle}";
    }

    protected override async Task OnInitializedAsync()
    {
        Mediator.Parameters.OnReferenceToggle += (sender, args) => { Mediator.RefsAreOpen = bool.Parse(Mediator.Parameters.AreReferencesOpened); };
    }

}
