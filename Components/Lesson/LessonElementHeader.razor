@namespace BibleComponents
@using Bible_Blazer_PWA.BibleReferenceParse
@using Bible_Blazer_PWA.DomainObjects
@using Bible_Blazer_PWA.Parameters
@using Bible_Blazer_PWA.Services.Parse
@using Param = Microsoft.AspNetCore.Components.ParameterAttribute


<MudCardHeader style="@Style">
    @{
        int referenceIndex = 0;
    }
    <span>
        @foreach (var token in Tokens)
        {
            switch (token.Type)
            {
                case TokenType.PlainText:
                    @((MarkupString)token.Text)
                    break;
                case TokenType.BibleReference:
                    var avoidClosure = referenceIndex;
                    var onclick = () => { Mediator.Activate(avoidClosure); };
                    @if (Mediator.Parameters.HideBibleRefTabs != "True")
                    {
                        <a href="" @onclick="onclick" @onclick:preventDefault>@token.Text</a>
                    }
                    else
                    {
                        <a href="" @onmouseenter="onclick" @onmouseout="()=>Mediator.Activate(-1)" @onclick:preventDefault>@token.Text</a>
                    }
                    referenceIndex++;
                    break;
            }
        }
    </span>
    @{
        bool spacerExists = false;
    }
    @if (Mediator.HasBibleReferences && Mediator.Parameters.HideBibleRefTabs != "True")
    {
        <MudSpacer />
        <MudIconButton Icon="@(Mediator.RefsAreOpen ? Icons.Outlined.ArrowDropUp : Icons.Outlined.ArrowDropDown)" OnClick="Mediator.ToggleReferences"></MudIconButton>
        spacerExists = true;
    }

    @if (!spacerExists)
    {
        <MudSpacer />
    }
    @if (Mediator.Parameters.NotesEnabled.HasValue && Mediator.Parameters.NotesEnabled.Value)
    {
        <MudIconButton Icon="@Icons.Outlined.NoteAlt" OnClick="AddNote"></MudIconButton>
    }

    @if (Mediator.ElementData.Children != null)
    {
        <MudIconButton Icon="@(Mediator.IsOpen ? Icons.Outlined.ExpandLess : Icons.Outlined.ExpandMore)" OnClick="Mediator.Toggle"></MudIconButton>
    }

</MudCardHeader>

@code {
    [Microsoft.AspNetCore.Components.Parameter]
    public LessonElementMediator Mediator { get; set; }

    private string Style
    {
        get => $"display:flex; background-color:{@Mediator.BackgroundColor};font-weight:{Mediator.FontWeight}; font-size:{Mediator.Parameters.FontSize}px;{Mediator.Border}";
    }

    private LinkedList<LessonElementToken> _tokens;
    private LinkedList<LessonElementToken> Tokens
    {
        get
        {
            if (_tokens == null)
            {
                _tokens = Mediator.Parser.ParseTextLineWithBibleReferences(Mediator.ElementData.Value.ToString()).GetTokens();
            }
            return _tokens;
        }
    }

    private void AddNote()
    {
        Mediator.OpenAddNote();
    }
}
