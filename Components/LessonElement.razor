@namespace BibleComponents
@using Bible_Blazer_PWA.BibleReferenceParse
@using Bible_Blazer_PWA.DomainObjects
@using Bible_Blazer_PWA.Parameters
@using Param = Microsoft.AspNetCore.Components.ParameterAttribute
@inject BibleService Bible
@inject DbParametersFacade dbParamFacade;

<div class="card" style="margin-top:@MarginTop; background-color:@BodyBackgroundColor; font-size:@($"{(parameters.FontSize)}px");">
    <div class="card-header" style="background-color:@BackgroundColor; font-weight: @FontWeight;">
        <span class="card-title">
            @ElementData.Value
            @if (@ElementData.Children != null)
            {
                <button type="button" class="btn @(IsOpen ? "btn-outline-primary" : "btn-outline-secondary") btn-outline-primary btn-sm" style="display: inline;" @onclick="Toggle">...</button>
            }
            @if (HasBibleReferences)
            {
                <button type="button" class="btn btn-outline-primary btn-sm" style="display: inline;" @onclick="ToggleReferences">..</button>
            }
        </span>

        @if (HasBibleReferences)
        {
            <ul class="nav nav-tabs card-header-tabs" style="@((RefsAreOpen & IsOpen) ? "" : "display:none;")">
                @{
                    int counter = 0;
                }

                @foreach (BibleReference reference in BibleReferences)
                {
                    int number = counter++;
                    <li class="nav-item">
                        <a class="nav-link @(IsActive(number)?"active":"")" style="color:#007bff" @onclick="@(e => SetActive(e, number))">@reference.ToString()</a>
                    </li>
                }
            </ul>
        }
    </div>
    @{
        int counter1 = 0;
    }
    @foreach (BibleReference reference in BibleReferences)
    {
        int number = counter1++;
        <div class="card-body" style="@((IsActive(number) && RefsAreOpen && IsOpen) ? "":"display:none;") background-color:beige">
            @if (_versesLoaded)
            {
                foreach (BibleService.VersesView view in _versesViewsDictionary[reference.ToString()])
                {
                    <span class="badge badge-primary">@view.Badge</span>
                    <i>@view.RawText.Replace("<J>", "").Replace("</J>", "")</i>
                }
            }
            else
            {
                <span>Загрузка...</span>
            }
        </div>
    }

    @if (@ElementData.Children != null)
    {
        <div class="card-body" style="@($"padding:{parameters.BlocksPadding}rem;" + (ElementData.Level < int.Parse(parameters.CollapseLevel) && IsOpen ? "" :"display:none;"))">
            @foreach (LessonElementData data in ElementData.Children)
            {
                <LessonElement ElementData="data"></LessonElement>
            }
        </div>
    }

</div>

@code {
    private int activeNumber = 0;
    private bool _versesLoaded = false;
    protected bool RefsAreOpen { get; set; } = true;
    protected bool IsOpen { get; set; } = true;
    protected Dictionary<string, IEnumerable<BibleService.VersesView>> _versesViewsDictionary;

    protected LinkedList<BibleReference> _references;

    [Param]
    public LessonElementData ElementData { get; set; }

    protected ParametersModel parameters;

    public string FontWeight { get; set; } = "300";
    public string BackgroundColor { get; set; } = "white";
    public string BodyBackgroundColor { get; set; } = "white";
    public string MarginTop { get; set; } = "0";

    protected override async Task OnInitializedAsync()
    {
        parameters = dbParamFacade.ParametersModel;
        _versesViewsDictionary = new Dictionary<string, IEnumerable<BibleService.VersesView>>();
        foreach (BibleReference reference in BibleReferences)
        {
            _versesViewsDictionary.Add(reference.ToString(), await Bible.GetVersesFromReference(reference));
        }
        _versesLoaded = true;
        parameters.OnReferenceToggle += (sender, args) => { RefsAreOpen = bool.Parse(parameters.AreReferencesOpened); };

        Parameters[] parametersForLevel;
        switch (ElementData.Level)
        {
            case 1:
                parametersForLevel = new Parameters[]
                    {
                    Parameters.FirstLevelBg,
                    Parameters.FirstLevelBodyBg,
                    Parameters.FirstLevelFontWeight,
                    Parameters.FirstLevelMarginTop
                    };
                break;
            case 2:
                parametersForLevel = new Parameters[]
                    {
                    Parameters.SecondLevelBg,
                    Parameters.SecondLevelBodyBg,
                    Parameters.SecondLevelFontWeight,
                    Parameters.SecondLevelMarginTop
                    };
                break;
            default:
                parametersForLevel = new Parameters[]
                    {
                    Parameters.ThirdLevelBg,
                    Parameters.ThirdLevelBodyBg,
                    Parameters.ThirdLevelFontWeight,
                    Parameters.ThirdLevelMarginTop
                    };
                break;
        }
        var BackgroundColorString = await dbParamFacade.GetParameterAsync(parametersForLevel[0]);
        BackgroundColor = (BackgroundColorString != null && BackgroundColorString != "") ? BackgroundColorString : "white";
        var BodyBackgroundColorString = await dbParamFacade.GetParameterAsync(parametersForLevel[1]);
        BodyBackgroundColor = (BodyBackgroundColorString != null && BodyBackgroundColorString != "") ? BodyBackgroundColorString : "white";
        var FontWeightString = await dbParamFacade.GetParameterAsync(parametersForLevel[2]);
        FontWeight = (FontWeightString != null && FontWeightString != "") ? FontWeightString : "300";
        var MarginTopString = await dbParamFacade.GetParameterAsync(parametersForLevel[3]);
        int MarginTopInt = int.TryParse(MarginTopString, out int marginTopParsed) ? marginTopParsed : 0;
        MarginTop = MarginTopInt == 0 ? "0" : MarginTopInt.ToString() + "px";
    }

    public bool HasBibleReferences
    {
        get
        {
            return BibleReferences.Any();
        }
    }

    public LinkedList<BibleReference> BibleReferences
    {
        get
        {
            if (_references == null)
            {
                _references = new Parser().ParseTextLineWithBibleReferences(ElementData.Value.ToString()).GetBibleReferences();
            }
            return _references;
        }
    }

    void ToggleReferences()
    {
        RefsAreOpen = !RefsAreOpen;
    }

    void Toggle()
    {
        IsOpen = !IsOpen;
    }

    private void SetActive(MouseEventArgs e, int buttonNumber)
    {
        activeNumber = buttonNumber;
    }

    private bool IsActive(int buttonNumber)
    {
        return activeNumber == buttonNumber;
    }
}