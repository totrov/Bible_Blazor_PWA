@namespace BibleComponents
@using Bible_Blazer_PWA.BibleReferenceParse
@using Bible_Blazer_PWA.DomainObjects
@using Bible_Blazer_PWA.Parameters
@using Param = Microsoft.AspNetCore.Components.ParameterAttribute
@inject BibleService Bible
@inject DbParametersFacade dbParamFacade;
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject Parser Parser;

@{
    var border = parameters.HideBlocksBorders == "True" ? "border:none;" : "";
    var style = $"display:block; background-color:{@BackgroundColor}; font-size:{parameters.FontSize}px;{border}";
    var cardStyle = $"margin-top:{@MarginTop};{border}";
    var contentPaddingStyle = $"padding:{(double.Parse(parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
                                $" {(double.Parse(parameters.BlocksPaddingRight) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
                                $" {(double.Parse(parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
                                $" {(double.Parse(parameters.BlocksPaddingLeft) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem;";
    var cardContentStyle = $"background-color:{BodyBackgroundColor}; {contentPaddingStyle}";
}
<MudCard class="card" style="@cardStyle" Elevation="0">
    <MudCardHeader style="@style">
        @{
            int referenceIndex = 0;
        }
        @foreach (var token in Tokens)
        {
            switch (token.Type)
            {
                case TokenType.PlainText:
                    @((MarkupString)token.Text)
                    break;
                case TokenType.BibleReference:
                    var avoidClosure = referenceIndex;
                    var onclick = () => { Activate(avoidClosure); };
                    @if (parameters.HideBibleRefTabs != "True")
                    {
                        <a href="" @onclick="onclick" @onclick:preventDefault>@token.Text</a>
                    }
                    else
                    {
                        <a href="" @onmouseenter="onclick" @onmouseout="()=>Activate(-1)" @onclick:preventDefault>@token.Text</a>
                    }
                    referenceIndex++;
                    break;
            }
        }
        @if (@ElementData.Children != null)
        {
            <button type="button" class="btn @(IsOpen ? "btn-outline-primary" : "btn-outline-secondary") btn-outline-primary btn-sm" style="display: inline;" @onclick="Toggle">...</button>
        }
        @if (HasBibleReferences && parameters.HideBibleRefTabs != "True")
        {
            <button type="button" class="btn btn-outline-primary btn-sm" style="display: inline;" @onclick="ToggleReferences">..</button>
        }
    </MudCardHeader>
    @{
        var showBibleRefTabs =
        parameters.HideBibleRefTabs != "True" &&
        ((RefsAreOpen && HasBibleReferences) || (ElementData.Children != null && ElementData.Level < int.Parse(parameters.CollapseLevel) && IsOpen));
    }
    <MudCardContent Style="@cardContentStyle">
        @if (HasBibleReferences)
        {
            var visibilityStyle = RefsAreOpen ? "" : "display:none;";
            @if (showBibleRefTabs)
            {
                <MudTabs style="@visibilityStyle" @ref="tabs" Rounded="true" ApplyEffectsToContainer="true">
                    @foreach (BibleReference reference in BibleReferences)
                    {
                        <MudTabPanel Text="@reference.ToString()" ID="@(reference.Id)">
                            @{
                                var bibleRefTextStyle = $"background-color:{parameters.BibleRefBgColor};font-size:{parameters.FontSize}px;color:{parameters.BibleRefFontColor};";
                            }
                            <MudText style="@bibleRefTextStyle">
                                @if (_versesLoaded)
                                {
                                    bool isFirst = true;
                                    foreach (BibleService.VersesView view in _versesViewsDictionary[reference.ToString()])
                                    {
                                        @if (dbParamFacade.ParametersModel.StartVersesOnANewLine == "True" && !isFirst)
                                        {
                                            <br />
                                        }
                                        <span class="badge badge-primary" style="background-color:@parameters.BibleRefHighlightColor;color:@parameters.BibleRefVersesIntervalsColor;">@view.Badge</span>
                                        @((MarkupString)view.RawText)
                                        isFirst = false;
                                    }
                                }
                                else
                                {
                                    <span>Загрузка...</span>
                                }
                            </MudText>
                        </MudTabPanel>
                    }
                </MudTabs>
            }
            else
            {
                int referenceIndex = 0;
                @foreach (BibleReference reference in BibleReferences)
                {
                    <MudPopover Open="CurrentPopoverIndex == referenceIndex" OverflowBehavior="OverflowBehavior.FlipNever" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.TopCenter" Paper="false">
                        @{
                            var bibleRefTextStyle = $"background-color:{parameters.BibleRefBgColor};font-size:{parameters.FontSize}px;color:{parameters.BibleRefFontColor};";
                        }
                        <MudPaper Outlined="true" Class="px-3 py-3" style="@bibleRefTextStyle">
                            <MudText>
                                @if (_versesLoaded)
                                {
                                    bool isFirst = true;
                                    foreach (BibleService.VersesView view in _versesViewsDictionary[reference.ToString()])
                                    {
                                        @if (dbParamFacade.ParametersModel.StartVersesOnANewLine == "True" && !isFirst)
                                        {
                                            <br />
                                        }
                                        <span class="badge badge-primary" style="background-color:@parameters.BibleRefHighlightColor;color:@parameters.BibleRefVersesIntervalsColor;">@view.Badge</span>
                                        @((MarkupString)view.RawText)
                                        isFirst = false;
                                    }
                                }
                                else
                                {
                                    <span>Загрузка...</span>
                                }
                            </MudText>
                        </MudPaper>
                    </MudPopover>
                    referenceIndex++;
                }
            }
        }
        @if (@ElementData.Children != null)
        {
            var visibilityStyle = ElementData.Level < int.Parse(parameters.CollapseLevel) && IsOpen ? "" : "display:none;";
            var subelementStyle = $"padding:{(double.Parse(parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
            $"{(double.Parse(parameters.BlocksPaddingRight) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
            $" {(double.Parse(parameters.BlocksPadding) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem" +
            $" {(double.Parse(parameters.BlocksPaddingLeft) / 100).ToString(System.Globalization.CultureInfo.InvariantCulture)}rem;"
            + $" {visibilityStyle}";
            <div style="@subelementStyle">
                @foreach (LessonElementData data in ElementData.Children)
                {
                    <LessonElement ElementData="data"></LessonElement>
                }
            </div>
        }
    </MudCardContent>
</MudCard>

@code {
    private int activeNumber = 0;
    private bool _versesLoaded = false;
    private MudTabs tabs;
    protected bool RefsAreOpen { get; set; } = true;
    protected bool IsOpen { get; set; } = true;
    protected Dictionary<string, IEnumerable<BibleService.VersesView>> _versesViewsDictionary;
    protected int CurrentPopoverIndex { get; set; } = -1;

    protected LinkedList<BibleReference> _references;
    protected LinkedList<LessonElementToken> _tokens;
    public LinkedList<LessonElementToken> Tokens
    {
        get
        {
            if (_tokens == null)
            {
                _tokens = Parser.ParseTextLineWithBibleReferences(ElementData.Value.ToString()).GetTokens();
            }
            return _tokens;
        }
    }

    void Activate(int number)
    {
        if (parameters.HideBibleRefTabs == "True")
        {
            CurrentPopoverIndex = number;
        }
        else
        {
            tabs.ActivatePanel(number);
        }
    }

    [Param]
    public LessonElementData ElementData { get; set; }

    protected ParametersModel parameters;

    public string FontWeight { get; set; } = "300";
    public string BackgroundColor { get; set; } = "white";
    public string BodyBackgroundColor { get; set; } = "white";
    public string MarginTop { get; set; } = "0";

    protected override async Task OnInitializedAsync()
    {
        parameters = dbParamFacade.ParametersModel;
        _versesViewsDictionary = new Dictionary<string, IEnumerable<BibleService.VersesView>>();
        foreach (BibleReference reference in BibleReferences)
        {
            _versesViewsDictionary.Add(reference.ToString(), await Bible.GetVersesFromReference(reference));
        }
        _versesLoaded = true;
        parameters.OnReferenceToggle += (sender, args) => { RefsAreOpen = bool.Parse(parameters.AreReferencesOpened); };

        Parameters[] parametersForLevel;
        switch (ElementData.Level)
        {
            case 1:
                parametersForLevel = new Parameters[]
                    {
                    Parameters.FirstLevelBg,
                    Parameters.FirstLevelBodyBg,
                    Parameters.FirstLevelFontWeight,
                    Parameters.FirstLevelMarginTop
                    };
                break;
            case 2:
                parametersForLevel = new Parameters[]
                    {
                    Parameters.SecondLevelBg,
                    Parameters.SecondLevelBodyBg,
                    Parameters.SecondLevelFontWeight,
                    Parameters.SecondLevelMarginTop
                    };
                break;
            default:
                parametersForLevel = new Parameters[]
                    {
                    Parameters.ThirdLevelBg,
                    Parameters.ThirdLevelBodyBg,
                    Parameters.ThirdLevelFontWeight,
                    Parameters.ThirdLevelMarginTop
                    };
                break;
        }
        var BackgroundColorString = await dbParamFacade.GetParameterAsync(parametersForLevel[0]);
        BackgroundColor = (BackgroundColorString != null && BackgroundColorString != "") ? BackgroundColorString : "white";
        var BodyBackgroundColorString = await dbParamFacade.GetParameterAsync(parametersForLevel[1]);
        BodyBackgroundColor = (BodyBackgroundColorString != null && BodyBackgroundColorString != "") ? BodyBackgroundColorString : "white";
        var FontWeightString = await dbParamFacade.GetParameterAsync(parametersForLevel[2]);
        FontWeight = (FontWeightString != null && FontWeightString != "") ? FontWeightString : "300";
        var MarginTopString = await dbParamFacade.GetParameterAsync(parametersForLevel[3]);
        int MarginTopInt = int.TryParse(MarginTopString, out int marginTopParsed) ? marginTopParsed : 0;
        MarginTop = MarginTopInt == 0 ? "0" : MarginTopInt.ToString() + "px";
    }

    public bool HasBibleReferences
    {
        get
        {
            return BibleReferences.Any();
        }
    }

    public LinkedList<BibleReference> BibleReferences
    {
        get
        {
            if (_references == null)
            {
                _references = Parser.ParseTextLineWithBibleReferences(ElementData.Value.ToString()).GetBibleReferences();
            }
            return _references;
        }
    }

    void ToggleReferences()
    {
        RefsAreOpen = !RefsAreOpen;
    }

    void Toggle()
    {
        IsOpen = !IsOpen;
    }

    private void SetActive(MouseEventArgs e, int buttonNumber)
    {
        activeNumber = buttonNumber;
    }

    private bool IsActive(int buttonNumber)
    {
        return activeNumber == buttonNumber;
    }
}