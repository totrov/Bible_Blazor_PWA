@namespace BibleComponents
@using Bible_Blazer_PWA.BibleReferenceParse
@using Bible_Blazer_PWA.DomainObjects

<BSButton Color="Color.Primary" OnClick="ClickHandler" IsOutline="true" Size="@Size">@Title</BSButton>
<BSCollapse IsOpen="@IsOpen">
    

        @{
            int counter = 0;
        }
        @foreach (BibleReference reference in BibleReferences)
        {
            counter++;
            string id = $"popover{counter}";
            <BSButton Id="@id" OnClick="onclick2" IsOutline="true" Color="Color.Primary" Size="Size.Small">@reference.ToString()</BSButton>
            <BSPopover Target="popover2" IsOpen="@IsOpen2" Placement="Placement.Bottom">
                <BSPopoverHeader>@reference.ToString()</BSPopoverHeader>
                <BSPopoverBody>и вражду положу между тобою и между женою, и между семенем твоим и между семенем ее; оно будет поражать тебя в голову, а ты будешь жалить его в пяту</BSPopoverBody>
            </BSPopover>
        }
        @Content
    
</BSCollapse>


@code {
    [Parameter]
    public BlazorStrap.Size Size { get; set; }

    protected bool IsOpen { get; set; }

    protected LinkedList<BibleReference> _references;

    protected void ClickHandler(MouseEventArgs e)
    {
        IsOpen = !IsOpen;
        StateHasChanged();
    }

    private bool prevIsOpen;
    protected override bool ShouldRender()
    {
        if (prevIsOpen == IsOpen)
            return false;
        prevIsOpen = IsOpen;
        return true;
    }

    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public string Title { get; set; }


    public LinkedList<BibleReference> BibleReferences
    {
        get
        {
            if (_references == null)
            {
                _references = new Parser().ParseTextLineWithBibleReferences(Title.ToString()).GetBibleReferences();
            }
            return _references;
        }
    }

    bool IsOpen2 { get; set; }
    void onclick2(MouseEventArgs e)
    {
        IsOpen2 = !IsOpen2;
        StateHasChanged();
    }
}
