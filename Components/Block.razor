@namespace BibleComponents
@using Bible_Blazer_PWA.BibleReferenceParse
@using Bible_Blazer_PWA.DomainObjects

<div class="card-header">
    <h5 class="card-title">
        @Title
        @if (HasBibleReferences)
        {
            <button type="button" class="btn btn-outline-primary" style="display: inline;" @onclick="ToggleReferences">..</button>
        }
    </h5>
    @if (HasBibleReferences)
    {
        <ul class="nav nav-tabs card-header-tabs" style="@(IsOpen ? "" : "display:none;")">
            @{
                int counter = 0;
            }
            @foreach (BibleReference reference in BibleReferences)
            {
                int number = counter++;
                <li class="nav-item">
                    <a class="nav-link @(IsActive(number)?"active":"")" style="color:#007bff" @onclick="@(e => SetActive(e, number))">@reference.ToString()</a>
                </li>
            }
        </ul>
        @foreach (BibleReference reference in BibleReferences)
        {
            int number = counter++;
            <div class="card-body" style="@(IsActive(1)?"":"display:none;") background-color:beige">
                This is some text within a card body.This is some text within a card body.This is some text within a card body.
            </div>
        }

    }
</div>

@ChildContent

@code {
    private int activeNumber;
    protected bool IsOpen { get; set; }

    protected LinkedList<BibleReference> _references;


    private bool prevIsOpen;
    protected override bool ShouldRender()
    {
        if (prevIsOpen == IsOpen)
            return false;
        prevIsOpen = IsOpen;
        return true;
    }

    [Parameter]
    public string Title { get; set; }


    [Parameter]
    public RenderFragment ChildContent { get; set; }

    public bool HasBibleReferences
    {
        get
        {
            return _references.Any();
        }
    }

    public LinkedList<BibleReference> BibleReferences
    {
        get
        {
            if (_references == null)
            {
                _references = new Parser().ParseTextLineWithBibleReferences(Title.ToString()).GetBibleReferences();
            }
            return _references;
        }
    }

    bool IsOpen2 { get; set; }
    void onclick2(MouseEventArgs e)
    {
        IsOpen2 = !IsOpen2;
        StateHasChanged();
    }

    void ToggleReferences()
    {
        IsOpen = !IsOpen;
    }

    private void SetActive(MouseEventArgs e, int buttonNumber)
    {
        activeNumber = buttonNumber;
    }

    private bool IsActive(int buttonNumber)
    {
        return activeNumber == buttonNumber;
    }
}
