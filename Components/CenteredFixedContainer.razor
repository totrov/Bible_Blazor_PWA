@inherits MudPaper;

@{
    base.BuildRenderTree(__builder);
}

@code {

    #region Constants

    private const int MinSize = 2;
    private const int MaxSize = 8;

    #endregion

    #region Parameters
    public int Size
    {
        get => _size;
        set
        {
            if (value >= MinSize && value <= MaxSize)
            {
                _size = value;
                SetStyle(_bottom, _side);
            }
        }
    }
    private int _size = 5;


    [Parameter]
    public bool Bottom
    {
        get => _bottom;
        set
        {
            SetStyle(value, _side);
            _bottom = value;
        }
    }
    private bool _bottom;

    [Parameter]
    public bool Side
    {
        get => _side;
        set
        {
            SetStyle(_bottom, value);
            _side = value;
        }
    }
    private bool _side;

    [Parameter]
    public bool Collapsed
    {
        get => _collapsed;
        set
        {
            SetStyle(_bottom, _side, value);
            _collapsed = value;
        }
    }
    private bool _collapsed;

    #endregion

    #region Style

    const string VerticalCenteredStyle = "position: fixed;top: 50%;left: 50%;transform: translate(-50%, -50%);background:none;z-index:2";
    private string CalcSideStyle(int size, bool isBottom, bool isCollapsed)
    {
        //TODO
        //int size = 
        if (isBottom)
        {
            return $"position: fixed;height:{size}0%;transition:height 0.3s;bottom:0;width:100%;background:none;z-index:2";
        }
        return $"position: fixed;height:{size}0%;transition:height 0.3s;top:0;width:100%;background:none;z-index:2";
    }

    private void SetStyle(bool isBottom, bool isSide, bool isCollapsed)
    {
        base.Style = isSide ? CalcSideStyle(Size, isBottom, isCollapsed) : VerticalCenteredStyle;
        Refresh();
    }

    #endregion

    #region Public Methods

    public void SetBottom(bool isBottom)
    {
        Bottom = isBottom;
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    #endregion

    protected override void OnInitialized()
    {
        if (!_bottom)
        {
            base.Style = VerticalCenteredStyle;
        }
        else
        {
            base.Square = true;
        }

    }

}
