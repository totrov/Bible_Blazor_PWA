@using Bible_Blazer_PWA.Services
@using System.IO
@using Bible_Blazer_PWA.Services.Parse
@using BlazorWorker.WorkerBackgroundService
@using System.Text.Json
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;
@inject HttpClient Http
@inject Corrector Corrector;
@inject ISnackbar Snackbar;
@inject NavigationManager navigation;

<MudContainer>
    <InputFile id="lessonFilesInput" OnChange="LoadFiles" hidden multiple />
    <MudButton HtmlTag="label"
               Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Filled.UploadFile"
               Disabled="@IsDisabled"
               for="lessonFilesInput">
        Загрузить из word файлов (можно выбрать несколько сразу)
    </MudButton>
    @if (LoadingItems.Any())
    {
        <MudGrid>
            <MudItem xs="8">
                <MudList Clickable="false">
                    @foreach (var item in LoadingItems)
                    {
                        <Bible_Blazer_PWA.Components.LoadingItem Name="@item.Name" Status="@item.Status"></Bible_Blazer_PWA.Components.LoadingItem>
                    }
                </MudList>

            </MudItem>
        </MudGrid>
    }
</MudContainer>
@code {
    [Parameter]
    public IWorkerBackgroundService<LessonImportService> LessonImportService { get; set; }
    [Parameter]
    public Action<bool> DisableEnableAction { get; set; }
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private List<Services.LoadingItem> LoadingItems { get; set; } = new List<Services.LoadingItem>();
    private bool IsDisabled { get; set; } = false;
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        DisableEnableAction(true);
        List<(string, string)> files = new(e.FileCount);
        foreach (var file in e.GetMultipleFiles(10))
        {
            using var readStream = file.OpenReadStream(3000000);
            var buf = new byte[readStream.Length];
            await readStream.ReadAsync(buf);
            files.Add((file.Name, System.Convert.ToBase64String(buf)));
        }

        foreach ((var filename, var file) in files)
        {
            //var offset = 2500;
            //for (int pos = 0; pos < file.Length; pos += offset)
            //{
            //    bool isChunkLast = file.Length - pos <= offset;
            //    int bytesCount = isChunkLast ? (int)file.Length - pos : offset;
            //    var bytes = System.Convert.ToBase64String(file.Skip(pos).Take(bytesCount).ToArray());
            //    await LessonImportService.RunAsync(s => s.WriteBytesToLessonFile(filename, bytes, isChunkLast));
            //}
            await LessonImportService.RunAsync(s => s.WriteBytesToLessonFile(filename, file, true));
            await LessonImportService.RunAsync(s => s.LoadLessonFromFile());
        }
        DisableEnableAction(false);
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task ReloadPage()
    {
        await Task.Delay(500);
        var currentUri = navigation.Uri;
        navigation.NavigateTo("/setup");
        navigation.NavigateTo(currentUri);
    }

    private void UpdateItemStatus(Services.LoadingItem item, string newStatus)
    {
        item.Status = newStatus;
        StateHasChanged();
    }
}
