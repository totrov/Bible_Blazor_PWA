@using Bible_Blazer_PWA.Components.Interactor.Lesson;
@using Bible_Blazer_PWA.Components.Interactor._SubComponents
@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.DataSources;
@using Bible_Blazer_PWA.Facades;
@using Bible_Blazer_PWA.Services;
@using static Bible_Blazer_PWA.Components.Interactor.Lesson.LessonInteractionModel;
@using static Bible_Blazer_PWA.Components.Interactor.LessonsInUnit.Interaction;

@inherits InteractionComponentBase<LessonsInUnitInteractionModel>

@inject LessonKeeper leesonKeeper;

<div style="@GetStyle">
    <MudContainer Outlined="true" Class="px-3 py-3">
        @if (Lessons != null) foreach (KeyValuePair<int, LessonLightweightDTO> keyValue in Lessons)
            {
                var lesson = keyValue.Value;
                <InteractionLink OnClick="@(() =>
        LessonInteractionModel.WithParameters<UnitIdLessonId>.
            ApplyToCurrentPanel(new(lesson.UnitId, lesson.Id), InteractionModel))">@lesson.Name</InteractionLink>
                <br />
            }
    </MudContainer>
</div>

@code {
    public SortedDictionary<int, LessonLightweightDTO> Lessons { get; set; }
    private LessonDS _lessonDS { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Lessons = leesonKeeper[InteractionModel.UnitId].Lessons;
    }
}
