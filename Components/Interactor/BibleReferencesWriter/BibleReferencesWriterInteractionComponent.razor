@using Bible_Blazer_PWA.DomainObjects
@using Bible_Blazer_PWA.Components.Interactor.BibleViewer
@using Bible_Blazer_PWA.Components.Interactor._SubComponents
@using static Bible_Blazer_PWA.Components.Interactor.BibleViewer.BibleViewerInteractionModel
@using static Bible_Blazer_PWA.Components.Interactor.BibleReferencesWriter.Interaction;
@inherits InteractionComponentBase<Bible_Blazer_PWA.Components.Interactor.BibleReferencesWriter.Interaction.BibleReferencesWriterInteractionModel>

@inject IJSRuntime JS;

<div style="@GetStyle">
    <MudContainer Class="px-3 py-3" id="bottomOverflowChackable">
        <MudText Style="@GetFontSizeStyle">
            @if (InteractionModel.Mediator.VersesLoaded)
            {
                bool isFirst = true;
                string referenceKey = Reference.ToString();
                bool hasChapterReferences = false;
                foreach (BibleVersesReference chapterRef in ChapterReferences)
                {
                    <InteractionLink OnClick="()=>BibleViewerInteractionModel.WithParameters<BookChapter>.ApplyToCurrentPanel(new(Reference.BookShortName, chapterRef.Chapter), InteractionModel)">
                        @($"{Reference.BookShortName}. {@chapterRef.Chapter} гл.")
                    </InteractionLink>
                    hasChapterReferences = true;
                }
                @if (hasChapterReferences)
                {
                    <br />
                }
                foreach (BibleService.VersesView view in InteractionModel.Mediator.VersesViewsDictionary[referenceKey])
                {
                    @if (InteractionModel.Mediator.DbParamFacade.ParametersModel.StartVersesOnANewLine == "True" && !isFirst)
                    {
                        <br />
                    }
                    (string _BibleRef, int chapterNumber, int verseNumber) = view.FirstVerseRef;
                    <span @onclick="()=>InteractionModel.LinkClicked(_BibleRef, chapterNumber)" class="badge badge-primary" style="cursor:pointer; background-color:@InteractionModel.Mediator.Parameters.BibleRefHighlightColor;color:@InteractionModel.Mediator.Parameters.BibleRefVersesIntervalsColor;">@view.Badge</span>
                    @((MarkupString)view.RawText)
                    isFirst = false;
                }
            }
            else
            {
                <span>Загрузка...</span>
            }
        </MudText>
    </MudContainer>
</div>

@code {
    public BibleReference Reference { get; set; }
    public List<BibleVersesReference> ChapterReferences { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        Reference = InteractionModel.Mediator.BibleReferences.ElementAt(InteractionModel.ReferenceNumber);
        ChapterReferences = Reference.References.Where(r => !r.FromToVerses.Any()).ToList();
        await InteractionModel.Mediator.VersesLoadTask;
        if (!InteractionModel.Mediator.VersesViewsDictionary[Reference.ToString()].Any() && ChapterReferences.Count == 1)
        {
            BibleViewerInteractionModel.WithParameters<BibleViewerInteractionModel.BookChapter>
                .ApplyToCurrentPanel(new(Reference.BookShortName, ChapterReferences[0].Chapter), InteractionModel);
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        InteractionModel.Overflowed = await JS.InvokeAsync<bool>("checkOverflow", "bottomOverflowChackable");
        dbParametersFacade.OnChange += (param, _) => { if (param == Parameters.Parameters.ToolsBg) StateHasChanged(); };
    }
}
