@using Bible_Blazer_PWA.DataBase.DTO
@using Bible_Blazer_PWA.DomainObjects
@using Bible_Blazer_PWA.Components.Interactor.BibleViewer
@using Bible_Blazer_PWA.Components.Interactor._SubComponents
@using static Bible_Blazer_PWA.Components.Interactor.BibleViewer.BibleViewerInteractionModel
@using static Bible_Blazer_PWA.Components.Interactor.BibleReferencesWriter.Interaction;
@inherits InteractionComponentBase<Bible_Blazer_PWA.Components.Interactor.BibleReferencesWriter.Interaction.BibleReferencesWriterInteractionModel>

@inject IJSRuntime JS;
@inject BibleService Bible;

<div style="@GetStyle">
    <MudContainer Class="px-3 py-3" id="bottomOverflowChackable">
        <MudText Style="@GetFontSizeStyle">
            @if (InteractionModel.Mediator.VersesLoaded)
            {
                bool isFirst = true;
                string referenceKey = Reference.ToString();

                if (ChapterReferences.Any())
                {
                    if (!InteractionModel.Mediator.VersesViewsDictionary[Reference.ToString()].Any())
                    {
                        foreach (BibleVersesReference chapterRef in ChapterReferences)
                        {
                            foreach (int chapterNumber in Enumerable.Range(chapterRef.Chapter, chapterRef.ChapterTo is null ? 1 : Math.Abs(chapterRef.ChapterTo.Value - chapterRef.Chapter) + 1))
                            {
                                <InteractionLink Bold="true" OnClick="()=>BibleViewerInteractionModel.WithParameters<BookChapter>.ApplyToCurrentPanel(new(Reference.BookShortName, chapterNumber), InteractionModel)">
                                    @($"{Reference.BookShortName}. {chapterNumber} гл.")
                                </InteractionLink>
                                if (Subheadings != null)
                                {
                                    foreach (SubheadingDTO subheading in Subheadings[chapterNumber])
                                    {
                                        if (@subheading.Verse != 1)
                                        {
                                            <MudBadge>@subheading.Verse</MudBadge>
                                        }
                                        <div style="padding-left:6px;">@((MarkupString)subheading.Subheading)</div>
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        <MudExpansionPanels MultiExpansion="true" DisableBorders="true" Elevation="0">
                            <MudExpansionPanel IsInitiallyExpanded="true" Text="Главы" Style="background-color:#e9e9d0;">
                                @foreach (BibleVersesReference chapterRef in ChapterReferences)
                                {
                                    foreach (int chapterNumber in Enumerable.Range(chapterRef.Chapter, chapterRef.ChapterTo is null ? 1 : Math.Abs(chapterRef.ChapterTo.Value - chapterRef.Chapter) + 1))
                                    {
                                        <InteractionLink Bold="true" OnClick="()=>BibleViewerInteractionModel.WithParameters<BookChapter>.ApplyToCurrentPanel(new(Reference.BookShortName, chapterNumber), InteractionModel)">
                                            @($"{Reference.BookShortName}. {chapterNumber} гл.")
                                        </InteractionLink>
                                        if (Subheadings != null)
                                        {
                                            foreach (SubheadingDTO subheading in Subheadings[chapterNumber])
                                            {
                                                if (@subheading.Verse != 1)
                                                {
                                                    <MudBadge>@subheading.Verse</MudBadge>
                                                }
                                                <div style="padding-left:6px;">@((MarkupString)subheading.Subheading)</div>
                                            }
                                        }
                                    }
                                }
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    }
                }

                foreach (BibleService.VersesView view in InteractionModel.Mediator.VersesViewsDictionary[referenceKey])
                {
                    @if (InteractionModel.Mediator.DbParamFacade.ParametersModel.StartVersesOnANewLine == "True" && !isFirst)
                    {
                        <br />
                    }
                    (string _BibleRef, int chapterNumber, int verseNumber) = view.FirstVerseRef;
                    <span @onclick="()=>InteractionModel.LinkClicked(_BibleRef, chapterNumber)" class="badge badge-primary" style="cursor:pointer; background-color:@InteractionModel.Mediator.Parameters.BibleRefHighlightColor;color:@InteractionModel.Mediator.Parameters.BibleRefVersesIntervalsColor;">@view.Badge</span>
                    @((MarkupString)view.RawText)
                    isFirst = false;
                }
            }
            else
            {
                <span>Загрузка...</span>
            }
        </MudText>
    </MudContainer>
</div>

@code {
    public BibleReference Reference { get; set; }
    public List<BibleVersesReference> ChapterReferences { get; set; }
    public Dictionary<int, IGrouping<int, SubheadingDTO>> Subheadings { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        base.OnParametersSet();
        Reference = InteractionModel.Mediator.BibleReferences.ElementAt(InteractionModel.ReferenceNumber);
        ChapterReferences = Reference.References.Where(r => !r.FromToVerses.Any()).ToList();
        await InteractionModel.Mediator.VersesLoadTask;
        if (!InteractionModel.Mediator.VersesViewsDictionary[Reference.ToString()].Any()
            && ChapterReferences.Count == 1 && ChapterReferences[0].ChapterTo is null)
        {
            BibleViewerInteractionModel.WithParameters<BibleViewerInteractionModel.BookChapter>
                .ApplyToCurrentPanel(new(Reference.BookShortName, ChapterReferences[0].Chapter), InteractionModel);
        }
        if (ChapterReferences.Any())
            Subheadings = (await (await db.GetRangeFromObjectStoreByIndex<SubheadingDTO>(
                "subheadings",
                "bookChapter",
                await Bible.GetBookIdByShortNameAsync(Reference.BookShortName),
                ChapterReferences.Min(r => r.Chapter),
                ChapterReferences.Max(r => r.ChapterTo.HasValue ? r.ChapterTo.Value : r.Chapter)
                )).GetTaskCompletionSourceWrapper())
                .GroupBy(s => s.Chapter).ToDictionary(g => g.Key);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        InteractionModel.Overflowed = await JS.InvokeAsync<bool>("checkOverflow", "bottomOverflowChackable");
        dbParametersFacade.OnChange += (param, _) => { if (param == Parameters.Parameters.ToolsBg) StateHasChanged(); };
    }
}
