@using Bible_Blazer_PWA.Components.Interactor.LessonUnits;
@using Bible_Blazer_PWA.Components.Interactor._SubComponents;
@using static Bible_Blazer_PWA.Components.Interactor.Interaction;
@inherits InteractionContainerComponent

<MudContainer Style="padding-left:0; padding-right:0;">
    @InteractionRender
</MudContainer>

@code {

    [Parameter]
    public InteractionPanel InteractionPanelComponent { get; set; }

    [Microsoft.AspNetCore.Components.Parameter]
    public EventCallback<IInteractionModel> OnModelChanged { get; set; }

    private RenderFragment? InteractionRender { get; set; }

    public override void SetInteractionModel(IInteractionModel model, bool toggleSequenceNumbers, bool fromTurnoverEvent = false)
    {
        if (model == null)
        {
            InteractionRender = null;
            return;
        }
        BreadcrumbsFacade breadcrumbsFacade = new(model.Background);
        breadcrumbsFacade.SetBreadcrumbs(model.GetBreadcrumbs());
        bool t = !toggleSequenceNumbers;
        InteractionRender = builder =>
        {
            builder.OpenComponent(t ? 1 : 51, typeof(Breadcrumbs));
            builder.AddAttribute(t ? 2 : 52, "BreadcrumbsFacade", breadcrumbsFacade);
            builder.CloseComponent();

            builder.OpenComponent(t ? 3 : 53, model.ComponentType);
            builder.AddAttribute(t ? 4 : 54, "InteractionModel", model);
            builder.CloseComponent();
        };
        OnModelChanged.InvokeAsync(model);
    }

    public override void Refresh()
    {
        StateHasChanged();
    }

    public bool DisableRenderOnes { get; set; }

    protected override bool ShouldRender()
    {
        if (DisableRenderOnes)
            return DisableRenderOnes = false;

        return true;
    }

    protected override void OnInitialized()
    {
        Interaction.SetMainContainer(this);
        LessonUnitsInteractionModel.Apply(true);
    }
}
