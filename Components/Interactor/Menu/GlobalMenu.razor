@using Bible_Blazer_PWA.Components.Interactor.Home;
@using Bible_Blazer_PWA.Components.Interactor.Setup;
@using Bible_Blazer_PWA.Services.Menu;
@inject MenuService menu

@using Bible_Blazer_PWA.Parameters;
@inject DbParametersFacade dbParamteres

@inject NavigationManager navigation

    <div id="version">v2.4</div>

    <MudSpacer />
    @foreach (var button in menu.Buttons.Where(b => b.Value.Visible))
    {
        if (button.Value.IsClickable)
        {
            <MudIconButton Icon="@menu.Buttons[button.Key].Icon" OnClick="@button.Value.Click" Color="Color.Inherit"></MudIconButton>
        }
        else
        {
            <MudImage Src="@button.Value.Icon" Width="50" Height="50"></MudImage>
        }
    }
<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => HomeInteractionModel.Apply())" />
@code {

    private ParametersModel parametersModel;

    string appBarStyle { get; set; }

    protected async override Task OnInitializedAsync()
    {
        parametersModel = dbParamteres.ParametersModel;
        appBarStyle = $"background-color:{parametersModel.ToolsBg}";
        menu.OnUpdate += (s, e) => this.StateHasChanged();
        parametersModel.OnHideBibleRefTabs += async () =>
        {
            await Task.Delay(500);
            var currentUri = navigation.Uri;
            navigation.NavigateTo("/emptyPage");
            navigation.NavigateTo(currentUri);
        };
    }
}
