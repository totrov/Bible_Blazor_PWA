@inherits InteractionComponentBase<Setup_UploadDownloadInteractionModel>

@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.Parameters;
@using Bible_Blazer_PWA.Services;
@using Bible_Blazer_PWA.Services.Parse;
@inject DbParametersFacade dbParamteres;
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS
@inject ImportExportService importExportService
@inject YoutubeLinks YTLinks

<div style="@GetStyle">
    <MudContainer>
        <MudList>
            <MudListItem Text="Скачать">
                <NestedList>
                    <MudListItem>
                        <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.SettingsApplications" @onclick="ExportParamsToFile">Параметры</MudButton>
                    </MudListItem>
                    <MudListItem>
                        <MudButton Variant="Variant.Text" EndIcon="@Icons.Filled.SpeakerNotes" @onclick="ExportNotesToFile">Заметки</MudButton>
                    </MudListItem>
                    <MudListItem>
                        @{
                            Action downloadLessons = () => { importExportService.ExportToJSON<LessonDTO>("lessons"); };
                        }
                        <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.Download" OnClick="downloadLessons">Уроки</MudButton>
                    </MudListItem>
                    @if (dbParamteres.ParametersModel.MainBackground == "#ffffff")
                    {
                        <MudListItem>
                            @{
                                Action downloadYT = () => { importExportService.SerializeToJSON<YoutubeLinkDTO>(YTLinks.SelectWhere(x => true), "youtubeMap_" + DateTime.UtcNow.ToLocalTime().ToString()); };
                            }
                            <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.YoutubeSearchedFor" OnClick="downloadYT">YT ссылки</MudButton>
                        </MudListItem>
                    }
                </NestedList>
            </MudListItem>
            <MudListItem Text="Загрузить">
                <NestedList>
                    <MudListItem>
                        <InputFile id="parametersFileInput" OnChange="LoadParameters" hidden />
                        <MudButton HtmlTag="label" Variant="Variant.Text" EndIcon="@Icons.Material.Filled.SettingsApplications" for="parametersFileInput">Параметры</MudButton>
                    </MudListItem>
                    <MudListItem>
                        <InputFile id="notesFileInput" OnChange="LoadNotes" hidden />
                        <MudButton HtmlTag="label" Variant="Variant.Text" EndIcon="@Icons.Filled.SpeakerNotes" for="notesFileInput">Заметки</MudButton>
                    </MudListItem>
                    @if (dbParamteres.ParametersModel.MainBackground == "#ffffff")
                    {
                        <MudListItem>
                            <InputFile id="YTlinksFileInput" OnChange="LoadYTLinks" hidden />
                            <MudButton HtmlTag="label" Variant="Variant.Text" EndIcon="@Icons.Filled.YoutubeSearchedFor" for="YTlinksFileInput">YT ссылки</MudButton>
                        </MudListItem>
                    }
                    <MudListItem>
                        <MudButton Variant="Variant.Text" EndIcon="@Icons.Material.Filled.UploadFile" OnClick="OpenManualLoadDialog">Уроки</MudButton>
                    </MudListItem>
                </NestedList>
            </MudListItem>
        </MudList>
    </MudContainer>
</div>

@code {
    private ParametersModel parametersModel;

    #region Import/Export

    private LessonImportService lessonImportService; //is it still used?

    private void OpenManualLoadDialog()
    {
        var parameters = new DialogParameters();
        parameters.Add("LessonImportService", lessonImportService);
        parameters.Add("DisableEnableAction", (bool b) =>
            {
                //TODO if anything needed
            });
        var options = new DialogOptions { CloseButton = true, CloseOnEscapeKey = true, DisableBackdropClick = true };
        DialogService.Show<ManualLessonLoadDialog>("Ручная загрузка уроков", parameters, options);
    }

    public async Task ExportParamsToFile()
    {
        await importExportService.ExportToJSON<DbParametersFacade.ParameterPOCO>("parameters");
    }

    public async Task ExportNotesToFile()
    {
        await importExportService.ExportToJSON<NoteDTO>("notes", true);
    }

    private async Task LoadNotes(InputFileChangeEventArgs e)
    {
        var notesFile = e.File;
        await importExportService.ImportFromStream(notesFile.OpenReadStream(), "notes");
        Snackbar.Add("Заметки загружены");
    }

    private async Task LoadYTLinks(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var links = await importExportService.DeserializeFromStream<IEnumerable<YoutubeLinkDTO>>(file.OpenReadStream());
        YTLinks.DeleteWhere(x => true);
        foreach (var l in links)
        {
            YTLinks.AddLink(l.Name, l.Url, l.LessonNumber, l.UnitId, l.IsMain, false);
        }
        Snackbar.Add("Ссылки на Youtube заменены из файла");
    }


    IBrowserFile parametrsFile = null;
    private async Task LoadParameters(InputFileChangeEventArgs e)
    {
        parametrsFile = e.File;
        await dbParamteres.ImportFromStream(parametrsFile.OpenReadStream());
        await parametersModel.InitFromDb();
        Snackbar.Add("Параметры загружены");
    }

    #endregion

    protected async override Task OnInitializedAsync()
    {
        parametersModel = dbParamteres.ParametersModel;
        lessonImportService = new LessonImportService(Snackbar, Http, new Corrector(new BibleRegexHelper(Http)), JS);
    }
}