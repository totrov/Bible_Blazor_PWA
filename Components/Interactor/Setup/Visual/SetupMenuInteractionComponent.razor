@inherits InteractionComponentBase<SetupMenuInteractionModel>

@using Bible_Blazer_PWA.Parameters;
@using MudBlazor.Utilities;
@using System.Collections

@inject DbParametersFacade DbParameters;

<div style="@GetStyle">
    <MudContainer>
        @if (buttonFlags != null)
        {
            var flags = Enum.Parse<InteractionButtons>(DbParameters.ParametersModel.InteractionButtonsFlags);
            <TogglableItemButton IsActive="@buttonFlags[0]" Icon="@Icons.Material.Filled.ArrowBack" OnClick="()=>Toggle(InteractionButtons.Back)" />
            <br />
            <TogglableItemButton IsActive="@buttonFlags[1]" Icon="@Icons.Material.Filled.ArrowForward" OnClick="()=>Toggle(InteractionButtons.Forward)" />
            <br />
            <TogglableItemButton IsActive="@buttonFlags[2]" Icon="@UnfoldLessDouble" OnClick="()=>Toggle(InteractionButtons.ExpandLessDouble)" />
            <br />
            <TogglableItemButton IsActive="@buttonFlags[3]" Icon="@UnfoldMoreDouble" OnClick="()=>Toggle(InteractionButtons.ExpandMoreDouble)" />
            <br />
            <TogglableItemButton IsActive="@buttonFlags[4]" Icon="@Icons.Material.Filled.UnfoldLess" OnClick="()=>Toggle(InteractionButtons.ExpandLess)" />
            <br />
            <TogglableItemButton IsActive="@buttonFlags[5]" Icon="@Icons.Material.Filled.UnfoldMore" OnClick="()=>Toggle(InteractionButtons.ExpandMore)" />
            <br />
            <TogglableItemButton IsActive="@buttonFlags[6]" Icon="@Icons.Material.Filled.ImportExport" OnClick="()=>Toggle(InteractionButtons.TurnOver)" />
            <br />
            <TogglableItemButton IsActive="@buttonFlags[7]" Disabled="true" Icon="@Icons.Material.Filled.Close" OnClick="()=>Toggle(InteractionButtons.Close)" />
        }
    </MudContainer>
</div>

@code {
    private bool[] buttonFlags = new bool[32];

    #region SVG
    private const string UnfoldLessDouble = "<g><rect fill=\"none\" height=\"24\" width=\"24\"/></g><g><g><polygon points=\"16.58,1.41 15.16,0 11.99,3.17 8.82,0 7.41,1.41 11.99,6\"/><polygon points=\"16.58,6.41 15.16,5 11.99,8.17 8.82,5 7.41,6.41 11.99,11\"/><polygon points=\"7.42,17.59 8.84,19 12.01,15.83 15.18,19 16.59,17.59 12.01,13\"/><polygon points=\"7.42,22.59 8.84,24 12.01,20.83 15.18,24 16.59,22.59 12.01,18\"/></g></g>";
    private const string UnfoldMoreDouble = "<g><rect fill=\"none\" height=\"24\" width=\"24\"></rect></g><g><g><g><path d=\"M12,7.83L15.17,11l1.41-1.41L12,5L7.41,9.59L8.83,11L12,7.83z M12,2.83L15.17,6l1.41-1.41L12,0L7.41,4.59L8.83,6L12,2.83 z M12,21.17L8.83,18l-1.41,1.41L12,24l4.59-4.59L15.17,18L12,21.17z M12,16.17L8.83,13l-1.41,1.41L12,19l4.59-4.59L15.17,13 L12,16.17z\"></path></g></g></g>";
    #endregion

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        UpdateBitFlags();
    }

    public void UpdateBitFlags()
    {
        var bitArray = new BitArray(new int[] { (int)Enum.Parse<InteractionButtons>(DbParameters.ParametersModel.InteractionButtonsFlags) });
        bitArray.CopyTo(buttonFlags, 0);
    }

    public void Refresh()
    {
        UpdateBitFlags();
        StateHasChanged();
    }

    public void Toggle(InteractionButtons button)
    {
        InteractionButtons currentSetup = Enum.Parse<InteractionButtons>(DbParameters.ParametersModel.InteractionButtonsFlags);
        DbParameters.ParametersModel.InteractionButtonsFlags = (currentSetup ^= button).ToString();
        Refresh();
    }
}
