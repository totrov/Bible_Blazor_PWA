@using Bible_Blazer_PWA.Components.Interactor._SubComponents
@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.DataSources;
@using static Bible_Blazer_PWA.Components.Interactor.Lesson.LessonInteractionModel;
@inject Bible_Blazer_PWA.DataBase.DatabaseJSFacade db;

<MudContainer Class="d-flex">
    @if (PrevLesson != null)
    {
        <InteractionLink
            OnClick="@(() => LessonInteractionModel.WithParameters<UnitIdLessonId>.Apply(new(UnitId, LessonId)))"
            StartIcon="@Icons.Filled.ArrowBack">@PrevLesson.Name
        </InteractionLink>
    }
    <MudSpacer />
    @if (NextLesson != null)
    {
        <InteractionLink
            OnClick="@(() => LessonInteractionModel.WithParameters<UnitIdLessonId>.Apply(new(UnitId, LessonId)))"
                     StartIcon="@Icons.Filled.ArrowForward">
            @NextLesson.Name
        </InteractionLink>
    }
</MudContainer>


@code {
    #region Parameters
    [Parameter]
    public string UnitId { get; set; }
    [Parameter]
    public string LessonId { get; set; }
    #endregion

    public LessonLightweightDTO PrevLesson { get; set; } = null;
    public LessonLightweightDTO NextLesson { get; set; } = null;

    protected async override Task OnInitializedAsync()
    {
        LessonDS lessonsDataSource = new(db);
        LessonLightweightDTO[] lessons =
            (await lessonsDataSource.GetLessonLightweightDTOForBlock(UnitId)).Values.ToArray();
        for (int i = 0; i < lessons.Length; i++)
        {
            if (lessons[i].Id == LessonId)
            {
                if (i > 0)
                {
                    PrevLesson = lessons[i - 1];
                }
                if (i < lessons.Length - 1)
                {
                    NextLesson = lessons[i + 1];
                }
            }
        }
    }

    public void Refresh() => StateHasChanged();
}
