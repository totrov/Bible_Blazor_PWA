@inherits InteractionComponentBase<LessonInteractionModel>

@using BibleComponents
@using Bible_Blazer_PWA.Components.Interactor.Creed;
@using Bible_Blazer_PWA.Components.Interactor._SubComponents
@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.DataSources;
@using Bible_Blazer_PWA.DomainObjects;
@using Bible_Blazer_PWA.Services.Menu;

@inject MenuService menu
@inject HttpClient Http

<h4 style="overflow:hidden">@menu.Title</h4>

<InteractionLink OnClick="()=>CreedInteractionModel.Apply()"></InteractionLink>

@if (Composite != null)
{
    <MudContainer>
        @foreach (LessonElementData data in CompositeChildren)
        {
            <LessonElement ElementData="data" InteractionPanel="Interaction.GetInteractionPanel()"></LessonElement>
        }

        <PrevNextLessonLinks @ref="PrevNextLessonLinks" LessonId="InteractionModel.LessonNumber" UnitId="InteractionModel.UnitId"></PrevNextLessonLinks>
    </MudContainer>
}

@code {
    public LessonElementData Composite { get; set; }
    public LinkedList<LessonElementData> CompositeChildren { get; set; }
    public LessonLightweightDTO PrevLesson { get; set; } = null;
    public LessonLightweightDTO NextLesson { get; set; } = null;
    public PrevNextLessonLinks PrevNextLessonLinks { get; set; }

    protected async override Task OnInitializedAsync()
    {
        dbParametersFacade.OnChange += (param, value) => { StateHasChanged(); };
        parameters.NotesEnabled = true;

        Composite = await LessonElementData.GetLessonCompositeAsync(
            Unit.GetUnitNumberByShortName(InteractionModel.UnitId),
            Convert.ToInt32(InteractionModel.LessonNumber),
            db, Http);
        CompositeChildren = Composite.Children;
    }

    //protected async override Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);
    //    _ = PrevNextLessonLinks.InitPrevNextLessons().ContinueWith(RefreshPrevNextLinks);
    //}
    //protected Task RefreshPrevNextLinks(Task task) => Task.Run(PrevNextLessonLinks.Refresh);
}
