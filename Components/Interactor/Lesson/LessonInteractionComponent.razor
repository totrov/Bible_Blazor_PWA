@inherits InteractionComponentBase<LessonInteractionModel>

@using BibleComponents
@using Bible_Blazer_PWA.Components.Interactor.Creed;
@using Bible_Blazer_PWA.Components.Interactor._SubComponents
@using Bible_Blazer_PWA.DataBase.DTO;
@using Bible_Blazer_PWA.DataSources;
@using Bible_Blazer_PWA.DomainObjects;
@using Bible_Blazer_PWA.Services.Menu;
@using System.Text.RegularExpressions;

@inject MenuService menu
@inject HttpClient Http

<div style="@GetStyle">
    <MudContainer Class="px-3 py-3">
        @if (Composite != null)
        {
            <InteractionLink OnClick="()=>CreedInteractionModel.Apply()">Символ Веры</InteractionLink>
            <InteractionLink OnClick="()=>CreedInteractionModel.Apply()">Символ Веры</InteractionLink>
            @foreach (LessonElementData data in CompositeChildren)
            {
                <LessonElement ElementData="data" InteractionPanel="Interaction.GetInteractionPanel()"></LessonElement>
            }

            <PrevNextLessonLinks @ref="PrevNextLessonLinks" InteractionModel="@InteractionModel"></PrevNextLessonLinks>
        }
    </MudContainer>
</div>

@code {
    public LessonElementData Composite { get; set; }
    public LinkedList<LessonElementData> CompositeChildren { get; set; }
    public LessonLightweightDTO PrevLesson { get; set; } = null;
    public LessonLightweightDTO NextLesson { get; set; } = null;
    public PrevNextLessonLinks PrevNextLessonLinks { get; set; }

    protected async override Task OnInitializedAsync()
    {
        dbParametersFacade.OnChange += (param, value) => { StateHasChanged(); };
        parameters.NotesEnabled = true;

        await ResetLesson();
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await ResetLesson();
        PrevNextLessonLinks.InteractionModel = InteractionModel;
    }

    protected async Task ResetLesson()
    {
        Composite = await LessonElementData.GetLessonCompositeAsync(
            Unit.GetUnitNumberByShortName(InteractionModel.UnitId),
            Convert.ToInt32(InteractionModel.LessonNumber),
            db, Http);
        CompositeChildren = Composite.Children;
        InteractionModel.SetLessonName(Regex.Replace(Composite.Value, ",(?=[а-яА-Яa-zA-Z])", ", "));
    }

    protected Task RefreshPrevNextLinks(Task task) => Task.Run(PrevNextLessonLinks.Refresh);
}
