@using Bible_Blazer_PWA.Components
@using Bible_Blazer_PWA.Components.Interactor.Menu;
@using Bible_Blazer_PWA.DataBase;
@using Bible_Blazer_PWA.Parameters;
@using Bible_Blazer_PWA.Services.Menu;
@using Bible_Blazer_PWA.Services;
@using Bible_Blazer_PWA.ViewModels;
@using MudBlazor.Utilities;
@using Bible_Blazer_PWA.Components.Interactor
@using System.Diagnostics.CodeAnalysis;
@using System.Threading;

@inject MenuService menu;
@inject JSInteropService JS;

<CenteredFixedContainer id="@Id" @ref="child" Elevation="0" Bottom="IsBottom" Side="IsSide" Collapsed="IsCollapsed">
    @InteractionRender
</CenteredFixedContainer>

@code {
    #region Parameters

    private bool _isBottom;
    [Microsoft.AspNetCore.Components.Parameter]
    public bool IsBottom
    {
        get => _isBottom;
        set
        {
            if (_isBottom != value)
            {
                _isBottom = value;
                OnPositionChanged.InvokeAsync(CalcPosition(IsSide, _isBottom));
            }
        }
    }

    public int Size
    {
        get => child.Size;
        set
        {
            child.Size = value;
        }
    }

    public async Task SetSizeAsync(int size)
    {
        await child.SetSizeAsync(size);
    }
    public bool IsCollapsed { get; set; }
    private bool _isSide;
    public bool IsSide
    {
        get => _isSide;
        set
        {
            if (_isSide != value)
            {
                _isSide = value;
                OnPositionChanged.InvokeAsync(CalcPosition(_isSide, IsBottom));
            }
        }
    }
    #endregion

    #region enums
    public enum Position
    {
        Top,
        Centered,
        Bottom
    }
    #endregion

    #region Events
    public event Action ChildInitialized;
    public void OnChildInitialized() => ChildInitialized?.Invoke();
    #endregion

    private RenderFragment? InteractionRender { get; set; }
    private CenteredFixedContainer child;

    [Microsoft.AspNetCore.Components.Parameter]
    public EventCallback<Position> OnPositionChanged { get; set; }

    public void SetInteractionModel(IInteractionModel model, bool fromTurnoverEvent = false)
    {
        if (model != null)
        {
            if (!fromTurnoverEvent)
            {
                Interaction.OnTurnOver += () => SetInteractionModel(model, true);
            }
            IsCollapsed = false;
            IsSide = model.IsSide;
            Position pos = CalcPosition(model.IsSide, IsBottom);
            switch (pos)
            {
                case Position.Bottom:
                    InteractionRender = builder =>
                    {
                        builder.OpenComponent(0, typeof(MudDivider));
                        builder.CloseComponent();
                        builder.OpenComponent(1, typeof(InteractionPanelMenu));
                        builder.AddAttribute(2, "InteractionModel", model);
                        builder.AddAttribute(3, "InteractionPanel", this);
                        builder.CloseComponent();
                        builder.OpenComponent(4, typeof(MudDivider));
                        builder.CloseComponent();
                        builder.OpenComponent(5, model.ComponentType);
                        builder.AddAttribute(6, "InteractionModel", model);
                        builder.AddAttribute(7, "InteractionPanel", this);
                        builder.CloseComponent();
                    };
                    break;

                case Position.Centered:
                    InteractionRender = builder =>
                    {
                        builder.OpenComponent(2, model.ComponentType);
                        builder.AddAttribute(3, "InteractionModel", model);
                        builder.CloseComponent();
                    };
                    break;

                case Position.Top:
                    InteractionRender = builder =>
                    {
                        builder.OpenComponent(0, model.ComponentType);
                        builder.AddAttribute(1, "InteractionModel", model);
                        builder.AddAttribute(2, "InteractionPanel", this);
                        builder.CloseComponent();

                        builder.OpenComponent(3, typeof(MudDivider));
                        builder.CloseComponent();

                        builder.OpenComponent(4, typeof(InteractionPanelMenu));
                        builder.AddAttribute(5, "InteractionModel", model);
                        builder.AddAttribute(6, "InteractionPanel", this);
                        builder.CloseComponent();

                        builder.OpenComponent(7, typeof(MudDivider));
                        builder.CloseComponent();
                    };
                    break;
            }
        }
        else
        {
            IsCollapsed = true;
            if (IsBottom)
            {
                InteractionRender = builder =>
                {
                    builder.OpenComponent(0, typeof(MudDivider));
                    builder.CloseComponent();
                    builder.OpenComponent(1, typeof(InteractionPanelMenu));
                    builder.AddAttribute(2, "InteractionModel", model);
                    builder.CloseComponent();
                };
            }
            else
            {
                InteractionRender = builder =>
                {
                    builder.OpenComponent(4, typeof(InteractionPanelMenu));
                    builder.AddAttribute(5, "InteractionModel", model);
                    builder.CloseComponent();

                    builder.OpenComponent(7, typeof(MudDivider));
                    builder.CloseComponent();
                };
            }
            IsSide = true;
        }
    }

    protected override void OnInitialized()
    {
        new Interaction(this, JS);
        Interaction.OnTurnOver += () => IsBottom = !IsBottom;
    }

    private Position CalcPosition(bool isSide, bool isBottom)
    {
        return isSide
            ? (isBottom ? Position.Bottom : Position.Top)
            : Position.Centered;
    }

    public void Refresh()
    {
        StateHasChanged();
    }

    private const string BottomSuffix = "Bottom", TopSuffix = "Top";
    public string Id { get => $"InteractionPanel{(IsSide ? (IsBottom ? BottomSuffix : TopSuffix) : string.Empty)}"; }
}
