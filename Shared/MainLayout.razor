@inherits LayoutComponentBase
@inject DbParametersFacade dbParamteres
@inject NavigationManager navigation
@inject MenuService menu
@using Bible_Blazer_PWA.Parameters;
@using Bible_Blazer_PWA.Services.Menu;
@using Bible_Blazer_PWA.Services.MudBlazorHelpers;

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    @{
        var appBarStyle = $"background-color:{parametersModel.ToolsBg}";
        bool isFixed = parametersModel.HideTools != "True";
    }

    <MudAppBar Color="Color.Inherit" Fixed="isFixed" Style="@appBarStyle">
        <MudIconButton Style=@ToolsAreHiddenCss Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <div style="overflow:hidden">@menu.Title</div>
        <MudSpacer />
        @foreach (var button in menu.Buttons.Where(b => b.Value.Visible))
        {
            if (button.Value.IsClickable)
            {
                <MudIconButton Icon="@menu.Buttons[button.Key].Icon" OnClick="@button.Value.Click" Color="Color.Inherit"></MudIconButton>
            }
            else
            {
                <MudImage Src="@button.Value.Icon" Width="50" Height="50"></MudImage>
            }
        }
        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
            <MudMenuItem><MudNavLink Href="/">Планы уроков</MudNavLink></MudMenuItem>
            <MudMenuItem><MudNavLink Href="/setup">Параметры</MudNavLink></MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="@DrawerOpen">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">
                Параметры
            </MudText>
        </MudDrawerHeader>

        <MudList>
            <MudListItem Text="Отступы">
                <NestedList>
                    <MudListItem>
                        <MudSlider @bind-Value="BlocksPadding" Min="0" Max="200" Step="5" Color="Color.Info">Внутренний отступ блоков: @dbParamteres.ParametersModel.BlocksPadding.ToString()</MudSlider>
                    </MudListItem>
                    <MudListItem>
                        <MudSlider @bind-Value="BlocksPaddingLeft" Min="0" Max="200" Step="5" Color="Color.Info">Внутренний отступ блоков слева: @dbParamteres.ParametersModel.BlocksPaddingLeft.ToString()</MudSlider>
                    </MudListItem>
                    <MudListItem>
                        <MudSlider @bind-Value="BlocksPaddingRight" Min="0" Max="200" Step="5" Color="Color.Info">Внутренний отступ блоков справа: @dbParamteres.ParametersModel.BlocksPaddingRight.ToString()</MudSlider>
                    </MudListItem>
                    <MudListItem>
                        <MudSlider @bind-Value="FirstLevelMarginTop" Min="0" Max="100" Step="5" Color="Color.Info">Отступ первых уровней сверху: @dbParamteres.ParametersModel.FirstLevelMarginTop.ToString()</MudSlider>
                    </MudListItem>
                    <MudListItem>
                        <MudSlider @bind-Value="SecondLevelMarginTop" Min="0" Max="100" Step="5" Color="Color.Info">Отступ вторых уровней сверху: @dbParamteres.ParametersModel.SecondLevelMarginTop.ToString()</MudSlider>
                    </MudListItem>
                    <MudListItem>
                        <MudSlider @bind-Value="ThirdLevelMarginTop" Min="0" Max="100" Step="5" Color="Color.Info">Отступ третьих уровней сверху: @dbParamteres.ParametersModel.ThirdLevelMarginTop.ToString()</MudSlider>
                    </MudListItem>
                </NestedList>
            </MudListItem>
            <MudListItem Text="Шрифты">
                <NestedList>
                    <MudListItem>
                        <MudSwitch @bind-Checked="dbParamteres.ParametersModel.FirstLevelFontWeight" Color="Color.Error" Converter="@(new BoldFontStringToBoolConverter())">Жирный шрифт в первых уровнях</MudSwitch>
                    </MudListItem>
                    <MudListItem>
                        <MudSwitch @bind-Checked="dbParamteres.ParametersModel.SecondLevelFontWeight" Color="Color.Error" Converter="@(new BoldFontStringToBoolConverter())">Жирный шрифт во вторых уровнях</MudSwitch>
                    </MudListItem>
                    <MudListItem>
                        <MudSwitch @bind-Checked="dbParamteres.ParametersModel.ThirdLevelFontWeight"
                                   Color="Color.Error" Converter="@(new BoldFontStringToBoolConverter())">Жирный шрифт в третьих уровнях</MudSwitch>
                    </MudListItem>
                </NestedList>
            </MudListItem>
            <MudListItem Text="Цвета">
                <NestedList>
                    <MudListItem Text="Общие">
                        <NestedList>
                            <MudListItem>
                                <MudColorPicker Label="Цвет Фона"
                                                @bind-Text="@dbParamteres.ParametersModel.MainBackground"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.MainBackground};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="Цвет фона панели инструментов"
                                                @bind-Text="@dbParamteres.ParametersModel.ToolsBg"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.ToolsBg};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                        </NestedList>
                    </MudListItem>
                    <MudListItem Text="Места Писания">
                        <NestedList>
                            <MudListItem>
                                <MudColorPicker Label="Цвет фона в местах Писания"
                                                @bind-Text="@dbParamteres.ParametersModel.BibleRefBgColor"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.BibleRefBgColor};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="Цвет текста в местах Писания"
                                                @bind-Text="@dbParamteres.ParametersModel.BibleRefFontColor"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.BibleRefFontColor};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="Цвет номеров стихов"
                                                @bind-Text="@dbParamteres.ParametersModel.BibleRefVersesNumbersColor"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.BibleRefVersesNumbersColor};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="Цвет фона выделенных стихов"
                                                @bind-Text="@dbParamteres.ParametersModel.BibleRefHighlightColor"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.BibleRefHighlightColor};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="Цвет текста выделенных стихов"
                                                @bind-Text="@dbParamteres.ParametersModel.BibleRefVersesIntervalsColor"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.BibleRefVersesIntervalsColor};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                        </NestedList>
                    </MudListItem>
                    <MudListItem Text="По уровням">
                        <NestedList>

                            <MudListItem>
                                <MudColorPicker Label="1й: Цвет фона в заголовке"
                                                @bind-Text="@dbParamteres.ParametersModel.FirstLevelBg"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.FirstLevelBg};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="1й: Цвет фона в теле"
                                                @bind-Text="@dbParamteres.ParametersModel.FirstLevelBodyBg"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.FirstLevelBodyBg};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="2й: Цвет фона в заголовке"
                                                @bind-Text="@dbParamteres.ParametersModel.SecondLevelBg"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.SecondLevelBg};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="2й: Цвет фона в теле"
                                                @bind-Text="@dbParamteres.ParametersModel.SecondLevelBodyBg"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.SecondLevelBodyBg};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="3й: Цвет фона в заголовке"
                                                @bind-Text="@dbParamteres.ParametersModel.ThirdLevelBg"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.ThirdLevelBg};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                            <MudListItem>
                                <MudColorPicker Label="3й: Цвет фона в теле"
                                                @bind-Text="@dbParamteres.ParametersModel.ThirdLevelBodyBg"
                                                Style="@($"background-color: {dbParamteres.ParametersModel.ThirdLevelBodyBg};")" Placeholder="Выберите цвет" />
                            </MudListItem>
                        </NestedList>
                    </MudListItem>
                </NestedList>
            </MudListItem>
            <MudListItem Text="Другое">
                <NestedList>
                    <MudListItem>
                        <MudSwitch @bind-Checked="dbParamteres.ParametersModel.StartVersesOnANewLine"
                                   Converter="@(new RegularStringToBoolConverter())"
                                   Color="Color.Primary">Стихи с новой строки</MudSwitch>
                    </MudListItem>
                    <MudListItem>
                        <MudSwitch @bind-Checked="HideTools" Color="Color.Primary">Скрывать инструменты</MudSwitch>
                    </MudListItem>
                    <MudListItem>
                        <MudSwitch @bind-Checked="dbParamteres.ParametersModel.HideBlocksBorders" Color="Color.Primary" Converter="@(new RegularStringToBoolConverter())">Скрывать границы блоков</MudSwitch>
                    </MudListItem>
                </NestedList>
            </MudListItem>
            <MudListItem Text="Режим">
                <NestedList>
                    <MudListItem>
                        <MudSwitch @bind-Checked="@parametersModel.HideBibleRefTabs" Color="Color.Primary" Converter="@(new RegularStringToBoolConverter())">
                            @(parametersModel.HideBibleRefTabs == "True" ? "Режим для телефона" : "Режим для большого экрана")
                        </MudSwitch>
                    </MudListItem>
                </NestedList>
            </MudListItem>
            <MudDivider></MudDivider>
            <MudListItem>
                <MudIconButton DisableRipple="true" Icon="@Icons.Filled.FileDownload" Style="@ButtonStyle"></MudIconButton>
                <MudIconButton DisableRipple="true" Icon="@Icons.Filled.UploadFile" Style="@ButtonStyle"></MudIconButton>
            </MudListItem>
        </MudList>

        <div style="display:flex; flex-direction:row; justify-content:center;">
        </div>
        <MudDivider></MudDivider>
    </MudDrawer>


    @{
        var paddingTop = parametersModel.HideTools == "True" ? "padding-top:10px; " : "";
        var style = $"{paddingTop}background-color:{parametersModel.MainBackground}";
    }
    <MudMainContent Style="@style">
        @Body
    </MudMainContent>
</MudLayout>

@code
{
    #region parameters
    #region Paddings
    private double BlocksPadding
    {
        get { return int.Parse(dbParamteres.ParametersModel.BlocksPadding); }
        set { dbParamteres.ParametersModel.BlocksPadding = value.ToString(); dbParamteres.ParametersModel.BlocksPaddingLeft = value.ToString(); }
    }

    private double BlocksPaddingLeft
    {
        get { return double.Parse(dbParamteres.ParametersModel.BlocksPaddingLeft); }
        set { dbParamteres.ParametersModel.BlocksPaddingLeft = value.ToString(); dbParamteres.ParametersModel.BlocksPaddingRight = value.ToString(); }
    }

    private double BlocksPaddingRight
    {
        get { return double.Parse(dbParamteres.ParametersModel.BlocksPaddingRight); }
        set { dbParamteres.ParametersModel.BlocksPaddingRight = value.ToString(); }
    }

    private int FirstLevelMarginTop
    {
        get { return int.Parse(dbParamteres.ParametersModel.FirstLevelMarginTop); }
        set { dbParamteres.ParametersModel.FirstLevelMarginTop = value.ToString(); }
    }

    private int SecondLevelMarginTop
    {
        get { return int.Parse(dbParamteres.ParametersModel.SecondLevelMarginTop); }
        set { dbParamteres.ParametersModel.SecondLevelMarginTop = value.ToString(); }
    }
    private int ThirdLevelMarginTop
    {
        get { return int.Parse(dbParamteres.ParametersModel.ThirdLevelMarginTop); }
        set { dbParamteres.ParametersModel.ThirdLevelMarginTop = value.ToString(); }
    }
    private bool HideTools
    {
        get { return bool.Parse(dbParamteres.ParametersModel.HideTools); }
        set { dbParamteres.ParametersModel.HideTools = value.ToString(); }
    }
    #endregion

    #endregion

    string ButtonStyle { get => $"color:{dbParamteres.ParametersModel.ToolsBg};"; }

    private ParametersModel parametersModel;
    string ToolsAreHiddenCss { get { return navigation.Uri.Contains("lesson/") ? "" : "display:none;"; } }
    string Header
    {
        get
        {
            var header = "О программе";
            if (navigation.Uri.Contains("lessons")) header = "Планы уроков";
            if (navigation.Uri.Contains("setup")) header = "Параметры";
            if (navigation.Uri.Contains("lesson/")) header = "";
            return header;
        }
    }
    protected async override Task OnInitializedAsync()
    {
        parametersModel = dbParamteres.ParametersModel;
        if (!navigation.Uri.Contains("lesson/"))
        {
            _drawerOpen = false;
        }
        menu.OnUpdate += (s, e) => this.StateHasChanged();
        parametersModel.OnHideBibleRefTabs += async () =>
        {
            await Task.Delay(500);
            var currentUri = navigation.Uri;
            navigation.NavigateTo("/emptyPage");
            navigation.NavigateTo(currentUri);
        };
    }

    bool _drawerOpen = false;
    bool DrawerOpen { get { return navigation.Uri.Contains("lesson/") ? _drawerOpen : false; } set { _drawerOpen = value; } }
    bool addedNavigationChangedHandler = false;
    void DrawerToggle()
    {
        if (!addedNavigationChangedHandler)
        {
            navigation.LocationChanged += (s, e) =>
            {
                if (!e.Location.Contains("lesson/"))
                { _drawerOpen = false; }
            };
            addedNavigationChangedHandler = true;
        }

        if (!navigation.Uri.Contains("lesson/"))
        {
            _drawerOpen = false;
        }
        else
        {
            _drawerOpen = !_drawerOpen;
        }
    }
}
